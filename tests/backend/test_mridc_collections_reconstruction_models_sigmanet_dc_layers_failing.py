# coding=utf-8
# Automatically generated by Pynguin.
import pytest

import mridc.collections.reconstruction.models.sigmanet.dc_layers as module_0


def test_case_0():
    try:
        str_0 = ";bd5d\x0c\\W\\\nY<\n*$"
        tuple_0 = (str_0,)
        bool_0 = True
        conjugate_gradient_0 = module_0.ConjugateGradient()
        assert module_0.ConjugateGradient.complexDot is not None
        assert module_0.ConjugateGradient.solve is not None
        assert module_0.ConjugateGradient.forward is not None
        assert module_0.ConjugateGradient.backward is not None
        var_0 = conjugate_gradient_0.backward(tuple_0, bool_0)
    except BaseException:
        pass


def test_case_1():
    try:
        bool_0 = False
        float_0 = -953.2
        int_0 = 1612
        conjugate_gradient_0 = module_0.ConjugateGradient()
        assert module_0.ConjugateGradient.complexDot is not None
        assert module_0.ConjugateGradient.solve is not None
        assert module_0.ConjugateGradient.forward is not None
        assert module_0.ConjugateGradient.backward is not None
        str_0 = ".rLtA~Pbz,GR\t"
        dict_0 = {str_0: str_0, str_0: str_0}
        data_i_d_layer_0 = module_0.DataIDLayer(**dict_0)
        assert conjugate_gradient_0 is not None
        assert data_i_d_layer_0.training is True
        data_prox_c_g_layer_0 = module_0.DataProxCGLayer(int_0, conjugate_gradient_0, data_i_d_layer_0, bool_0)
        assert data_prox_c_g_layer_0.training is True
        assert data_prox_c_g_layer_0.lambdaa_init == 1612
        assert data_prox_c_g_layer_0.fft_centered is True
        assert data_prox_c_g_layer_0.fft_normalization == "ortho"
        assert data_prox_c_g_layer_0.spatial_dims == [-2, -1]
        var_0 = data_prox_c_g_layer_0.set_learnable(float_0)
    except BaseException:
        pass


def test_case_2():
    try:
        bool_0 = False
        str_0 = "P/35Z9*mh?mP6]"
        bool_1 = True
        set_0 = None
        dict_0 = {}
        list_0 = []
        data_v_s_layer_0 = module_0.DataVSLayer(list_0, list_0)
        assert data_v_s_layer_0.training is True
        assert data_v_s_layer_0.learnable is True
        assert data_v_s_layer_0.fft_centered is True
        assert data_v_s_layer_0.fft_normalization == "ortho"
        assert data_v_s_layer_0.spatial_dims == [-2, -1]
        bool_2 = True
        int_0 = 1783
        tuple_0 = (dict_0,)
        list_1 = []
        conjugate_gradient_0 = module_0.ConjugateGradient(*list_1)
        assert conjugate_gradient_0 is not None
        assert module_0.ConjugateGradient.complexDot is not None
        assert module_0.ConjugateGradient.solve is not None
        assert module_0.ConjugateGradient.forward is not None
        assert module_0.ConjugateGradient.backward is not None
        var_0 = conjugate_gradient_0.forward(
            bool_0, str_0, bool_1, set_0, dict_0, data_v_s_layer_0, dict_0, bool_2, int_0, tuple_0, set_0
        )
    except BaseException:
        pass


def test_case_3():
    try:
        bool_0 = False
        list_0 = []
        data_v_s_layer_0 = module_0.DataVSLayer(list_0, list_0)
        assert data_v_s_layer_0.training is True
        assert data_v_s_layer_0.learnable is True
        assert data_v_s_layer_0.fft_centered is True
        assert data_v_s_layer_0.fft_normalization == "ortho"
        assert data_v_s_layer_0.spatial_dims == [-2, -1]
        conjugate_gradient_0 = module_0.ConjugateGradient()
        assert conjugate_gradient_0 is not None
        assert module_0.ConjugateGradient.complexDot is not None
        assert module_0.ConjugateGradient.solve is not None
        assert module_0.ConjugateGradient.forward is not None
        assert module_0.ConjugateGradient.backward is not None
        str_0 = "n\\MXfY"
        data_prox_c_g_layer_0 = module_0.DataProxCGLayer(str_0, bool_0, str_0)
    except BaseException:
        pass


def test_case_4():
    try:
        d_c_layer_0 = module_0.DCLayer()
        assert d_c_layer_0.training is True
        assert d_c_layer_0.learnable is True
        assert d_c_layer_0.fft_centered is True
        assert d_c_layer_0.fft_normalization == "ortho"
        assert d_c_layer_0.spatial_dims == [-2, -1]
        str_0 = '$ZHOJg(|E2j"c|#7)'
        d_c_layer_1 = module_0.DCLayer()
        assert d_c_layer_1.training is True
        assert d_c_layer_1.learnable is True
        assert d_c_layer_1.fft_centered is True
        assert d_c_layer_1.fft_normalization == "ortho"
        assert d_c_layer_1.spatial_dims == [-2, -1]
        list_0 = [d_c_layer_0, str_0, d_c_layer_1, d_c_layer_1]
        str_1 = "Only 1, 2 and 3 dimensions are supported. Received {}."
        var_0 = d_c_layer_0.forward(list_0, list_0, str_1)
    except BaseException:
        pass


def test_case_5():
    try:
        data_i_d_layer_0 = module_0.DataIDLayer()
        assert data_i_d_layer_0.training is True
        str_0 = "Successfully exported "
        bool_0 = True
        conjugate_gradient_0 = None
        int_0 = -1293
        set_0 = {conjugate_gradient_0, str_0, conjugate_gradient_0, bool_0}
        list_0 = [set_0, bool_0]
        bool_1 = False
        data_g_d_layer_0 = module_0.DataGDLayer(bool_1)
        assert data_g_d_layer_0.training is True
        assert data_g_d_layer_0.lambda_init is False
        assert data_g_d_layer_0.fft_centered is True
        assert data_g_d_layer_0.fft_normalization == "ortho"
        assert data_g_d_layer_0.spatial_dims == [-2, -1]
        str_1 = "gCIxg x^K8=("
        float_0 = -1747.34
        list_1 = []
        data_g_d_layer_1 = module_0.DataGDLayer(list_1)
        assert data_g_d_layer_1.training is True
        assert data_g_d_layer_1.lambda_init == []
        assert data_g_d_layer_1.fft_centered is True
        assert data_g_d_layer_1.fft_normalization == "ortho"
        assert data_g_d_layer_1.spatial_dims == [-2, -1]
        list_2 = [list_1, list_1, data_g_d_layer_1, data_g_d_layer_1]
        conjugate_gradient_1 = module_0.ConjugateGradient(*list_2)
        assert conjugate_gradient_1 is not None
        assert module_0.ConjugateGradient.complexDot is not None
        assert module_0.ConjugateGradient.solve is not None
        assert module_0.ConjugateGradient.forward is not None
        assert module_0.ConjugateGradient.backward is not None
        var_0 = conjugate_gradient_1.forward(
            data_i_d_layer_0,
            str_0,
            bool_0,
            conjugate_gradient_0,
            int_0,
            list_0,
            data_g_d_layer_0,
            str_1,
            data_i_d_layer_0,
            set_0,
            float_0,
        )
    except BaseException:
        pass


def test_case_6():
    try:
        int_0 = 600
        list_0 = [int_0, int_0]
        bool_0 = False
        float_0 = 2070.9947
        list_1 = []
        bool_1 = False
        data_g_d_layer_0 = module_0.DataGDLayer(list_1, bool_1)
        assert data_g_d_layer_0.training is True
        assert data_g_d_layer_0.lambda_init == []
        assert data_g_d_layer_0.fft_centered is True
        assert data_g_d_layer_0.fft_normalization == "ortho"
        assert data_g_d_layer_0.spatial_dims == [-2, -1]
        int_1 = 3192
        str_0 = 'XZ>>"*x'
        int_2 = -2518
        int_3 = -525
        tuple_0 = int_2, int_3
        data_g_d_layer_1 = module_0.DataGDLayer(int_1, bool_0, str_0, tuple_0)
        assert data_g_d_layer_1.training is True
        assert data_g_d_layer_1.lambda_init == 3192
        assert data_g_d_layer_1.fft_centered == 'XZ>>"*x'
        assert data_g_d_layer_1.fft_normalization == (-2518, -525)
        assert data_g_d_layer_1.spatial_dims == [-2, -1]
        var_0 = data_g_d_layer_1.forward(int_0, float_0, list_0, data_g_d_layer_0)
    except BaseException:
        pass


def test_case_7():
    try:
        str_0 = None
        d_c_layer_0 = module_0.DCLayer()
        assert d_c_layer_0.training is True
        assert d_c_layer_0.learnable is True
        assert d_c_layer_0.fft_centered is True
        assert d_c_layer_0.fft_normalization == "ortho"
        assert d_c_layer_0.spatial_dims == [-2, -1]
        list_0 = [str_0, str_0]
        list_1 = [list_0, str_0]
        conjugate_gradient_0 = module_0.ConjugateGradient(*list_1)
        assert conjugate_gradient_0 is not None
        assert module_0.ConjugateGradient.complexDot is not None
        assert module_0.ConjugateGradient.solve is not None
        assert module_0.ConjugateGradient.forward is not None
        assert module_0.ConjugateGradient.backward is not None
        conjugate_gradient_1 = module_0.ConjugateGradient()
        assert conjugate_gradient_1 is not None
        var_0 = d_c_layer_0.forward(list_0, d_c_layer_0, conjugate_gradient_1)
    except BaseException:
        pass


def test_case_8():
    try:
        d_c_layer_0 = module_0.DCLayer()
        assert d_c_layer_0.training is True
        assert d_c_layer_0.learnable is True
        assert d_c_layer_0.fft_centered is True
        assert d_c_layer_0.fft_normalization == "ortho"
        assert d_c_layer_0.spatial_dims == [-2, -1]
        conjugate_gradient_0 = module_0.ConjugateGradient()
        assert conjugate_gradient_0 is not None
        assert module_0.ConjugateGradient.complexDot is not None
        assert module_0.ConjugateGradient.solve is not None
        assert module_0.ConjugateGradient.forward is not None
        assert module_0.ConjugateGradient.backward is not None
        float_0 = -200.7
        data_prox_c_g_layer_0 = module_0.DataProxCGLayer(float_0)
        assert data_prox_c_g_layer_0.training is True
        assert data_prox_c_g_layer_0.lambdaa_init == pytest.approx(-200.7, abs=0.01, rel=0.01)
        assert data_prox_c_g_layer_0.tol == pytest.approx(1e-06, abs=0.01, rel=0.01)
        assert data_prox_c_g_layer_0.iter == 10
        assert data_prox_c_g_layer_0.fft_centered is True
        assert data_prox_c_g_layer_0.fft_normalization == "ortho"
        assert data_prox_c_g_layer_0.spatial_dims == [-2, -1]
        bool_0 = False
        var_0 = conjugate_gradient_0.complexDot(conjugate_gradient_0, bool_0)
    except BaseException:
        pass


def test_case_9():
    try:
        str_0 = """
    Extends existing argparse with default reconstruction args.

    Parameters
    ----------
    parent_parser: Custom CLI parser that will be extended.
        ArgumentParser

    Returns
    -------
    Parser extended by Reconstruction arguments.
        ArgumentParser
    """
        complex_0 = None
        bytes_0 = b"\xff\xf3+\xbd\x07\xe4\xef\x85l"
        list_0 = [complex_0, str_0, bytes_0]
        bool_0 = True
        data_g_d_layer_0 = module_0.DataGDLayer(list_0, bool_0)
    except BaseException:
        pass


def test_case_10():
    try:
        str_0 = "A0^{9~}h&W4zPCxH0G"
        dict_0 = {str_0: str_0}
        data_i_d_layer_0 = module_0.DataIDLayer(**dict_0)
        assert data_i_d_layer_0.training is True
        bool_0 = False
        list_0 = []
        conjugate_gradient_0 = module_0.ConjugateGradient(*list_0)
        assert conjugate_gradient_0 is not None
        assert module_0.ConjugateGradient.complexDot is not None
        assert module_0.ConjugateGradient.solve is not None
        assert module_0.ConjugateGradient.forward is not None
        assert module_0.ConjugateGradient.backward is not None
        str_1 = "Z&^XBDn?!~$"
        list_1 = []
        int_0 = -2848
        tuple_0 = int_0, int_0
        data_prox_c_g_layer_0 = module_0.DataProxCGLayer(list_1, tuple_0)
        assert data_prox_c_g_layer_0.training is True
        assert data_prox_c_g_layer_0.lambdaa_init == []
        assert data_prox_c_g_layer_0.tol == (-2848, -2848)
        assert data_prox_c_g_layer_0.iter == 10
        assert data_prox_c_g_layer_0.fft_centered is True
        assert data_prox_c_g_layer_0.fft_normalization == "ortho"
        assert data_prox_c_g_layer_0.spatial_dims == [-2, -1]
        var_0 = data_prox_c_g_layer_0.forward(bool_0, conjugate_gradient_0, str_0, str_1)
    except BaseException:
        pass
