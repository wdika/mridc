# coding=utf-8
# Automatically generated by Pynguin.
import mridc.core.classes.dataset as module_0


def test_case_0():
    try:
        list_0 = None
        dict_0 = None
        iterable_dataset_0 = module_0.IterableDataset(*list_0, **dict_0)
    except BaseException:
        pass


def test_case_1():
    try:
        int_0 = 40
        dataset_config_0 = module_0.DatasetConfig(int_0)
        assert dataset_config_0.batch_size == 40
        assert dataset_config_0.drop_last is False
        assert dataset_config_0.shuffle is False
        assert dataset_config_0.num_workers == 0
        assert dataset_config_0.pin_memory is True
        assert module_0.DatasetConfig.batch_size == 32
        assert module_0.DatasetConfig.drop_last is False
        assert module_0.DatasetConfig.shuffle is False
        assert module_0.DatasetConfig.num_workers == 0
        assert module_0.DatasetConfig.pin_memory is True
        bool_0 = None
        list_0 = []
        iterable_dataset_0 = module_0.IterableDataset(*list_0)
        var_0 = iterable_dataset_0.collate_fn(bool_0)
    except BaseException:
        pass


def test_case_2():
    try:
        str_0 = "\x0b!EO}1I?BjJsJs|6"
        str_1 = """
        Parameters
        ----------
        lambda_init: Init value of data term weight lambda.
        learnable: If True, the data term weight lambda is learnable.
        fft_centered: If True, the FFT is centered.
        fft_normalization: If "ortho", the FFT is normalized.
        spatial_dims: If not None, the spatial dimensions of the FFT.
        """
        str_2 = "(Fo'l\"+\t^j O=k"
        str_3 = None
        dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0, str_3: str_3}
        dataset_0 = module_0.Dataset(**dict_0)
    except BaseException:
        pass


def test_case_3():
    try:
        bool_0 = False
        str_0 = "bc;sPit.6e&\x0bb\x0b"
        list_0 = []
        iterable_dataset_0 = module_0.IterableDataset(*list_0)
        dataset_0 = module_0.Dataset()
        var_0 = dataset_0.collate_fn(str_0)
        assert var_0 == "bc;sPit.6e&\x0bb\x0b"
        assert iterable_dataset_0 is not None
        assert dataset_0 is not None
        dataset_1 = module_0.Dataset()
        assert dataset_1 is not None
        var_1 = dataset_1.collate_fn(bool_0)
    except BaseException:
        pass


def test_case_4():
    try:
        str_0 = "$uY[L\nT!8p[z[B\\"
        dict_0 = {}
        iterable_dataset_0 = module_0.IterableDataset(**dict_0)
        var_0 = iterable_dataset_0.collate_fn(str_0)
        assert var_0 == "$uY[L\nT!8p[z[B\\"
        assert iterable_dataset_0 is not None
        dataset_config_0 = module_0.DatasetConfig()
        assert dataset_config_0.batch_size == 32
        assert dataset_config_0.drop_last is False
        assert dataset_config_0.shuffle is False
        assert dataset_config_0.num_workers == 0
        assert dataset_config_0.pin_memory is True
        assert module_0.DatasetConfig.batch_size == 32
        assert module_0.DatasetConfig.drop_last is False
        assert module_0.DatasetConfig.shuffle is False
        assert module_0.DatasetConfig.num_workers == 0
        assert module_0.DatasetConfig.pin_memory is True
        var_1 = iterable_dataset_0.collate_fn(dataset_config_0)
    except BaseException:
        pass


def test_case_5():
    try:
        dataset_0 = module_0.Dataset()
    except BaseException:
        pass


def test_case_6():
    try:
        complex_0 = None
        dataset_0 = module_0.Dataset()
        var_0 = dataset_0.collate_fn(complex_0)
    except BaseException:
        pass


def test_case_7():
    try:
        bool_0 = True
        bool_1 = True
        dataset_config_0 = module_0.DatasetConfig(bool_0, bool_1)
        assert dataset_config_0.batch_size is True
        assert dataset_config_0.drop_last is True
        assert dataset_config_0.shuffle is False
        assert dataset_config_0.num_workers == 0
        assert dataset_config_0.pin_memory is True
        assert module_0.DatasetConfig.batch_size == 32
        assert module_0.DatasetConfig.drop_last is False
        assert module_0.DatasetConfig.shuffle is False
        assert module_0.DatasetConfig.num_workers == 0
        assert module_0.DatasetConfig.pin_memory is True
        str_0 = "Set crop size."
        str_1 = "E?W5"
        dict_0 = {str_0: bool_1, str_0: bool_1, str_0: dataset_config_0, str_1: dataset_config_0}
        dataset_0 = module_0.Dataset(**dict_0)
    except BaseException:
        pass
