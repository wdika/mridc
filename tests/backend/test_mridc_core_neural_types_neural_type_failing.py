# coding=utf-8
# Automatically generated by Pynguin.
import mridc.core.neural_types.comparison as module_1
import mridc.core.neural_types.elements as module_2
import mridc.core.neural_types.neural_type as module_0


def test_case_0():
    try:
        str_0 = "P:&C"
        list_0 = [str_0, str_0, str_0]
        neural_type_error_0 = module_0.NeuralTypeError()
        tuple_0 = ()
        neural_type_0 = module_0.NeuralType(tuple_0)
        assert neural_type_error_0 is not None
        assert neural_type_0.axes == ()
        assert neural_type_0.optional is False
        var_0 = neural_type_0.__eq__(list_0)
        assert var_0 is False
        list_1 = [list_0, tuple_0, str_0, str_0, str_0]
        bool_0 = None
        bytes_0 = b"\x01;\xc4wm\xcb\xa5\x19\xca\xf1"
        neural_type_1 = module_0.NeuralType()
        assert neural_type_1.axes is None
        assert neural_type_1.optional is False
        dict_0 = {str_0: list_1}
        neural_type_comparison_result_0 = neural_type_0.compare(neural_type_0)
        assert neural_type_comparison_result_0 == module_1.NeuralTypeComparisonResult.SAME
        assert module_1.NeuralTypeComparisonResult.SAME == module_1.NeuralTypeComparisonResult.SAME
        assert module_1.NeuralTypeComparisonResult.LESS == module_1.NeuralTypeComparisonResult.LESS
        assert module_1.NeuralTypeComparisonResult.GREATER == module_1.NeuralTypeComparisonResult.GREATER
        assert (
            module_1.NeuralTypeComparisonResult.DIM_INCOMPATIBLE
            == module_1.NeuralTypeComparisonResult.DIM_INCOMPATIBLE
        )
        assert module_1.NeuralTypeComparisonResult.TRANSPOSE_SAME == module_1.NeuralTypeComparisonResult.TRANSPOSE_SAME
        assert (
            module_1.NeuralTypeComparisonResult.CONTAINER_SIZE_MISMATCH
            == module_1.NeuralTypeComparisonResult.CONTAINER_SIZE_MISMATCH
        )
        assert module_1.NeuralTypeComparisonResult.INCOMPATIBLE == module_1.NeuralTypeComparisonResult.INCOMPATIBLE
        assert (
            module_1.NeuralTypeComparisonResult.SAME_TYPE_INCOMPATIBLE_PARAMS
            == module_1.NeuralTypeComparisonResult.SAME_TYPE_INCOMPATIBLE_PARAMS
        )
        assert module_1.NeuralTypeComparisonResult.UNCHECKED == module_1.NeuralTypeComparisonResult.UNCHECKED
        float_0 = None
        int_0 = 240
        var_1 = neural_type_0.__repr__()
        assert var_1 == "NeuralType(axis=(), element_type=VoidType)"
        neural_port_nm_tensor_mismatch_error_0 = module_0.NeuralPortNmTensorMismatchError(
            dict_0, neural_type_comparison_result_0, list_0, float_0, int_0
        )
        assert (
            neural_port_nm_tensor_mismatch_error_0.message
            == """
In {'P:&C': [['P:&C', 'P:&C', 'P:&C'], (), 'P:&C', 'P:&C', 'P:&C']}.
Port: NeuralTypeComparisonResult.SAME and a NmTensor it was fed are
of incompatible neural types:

['P:&C', 'P:&C', 'P:&C']

 and

None

Type comparison result: 240"""
        )
        var_2 = neural_type_0.__str__()
        assert var_2 == "axes: (); elements_type: VoidType"
        int_1 = 188
        element_type_0 = None
        str_1 = ":bD"
        bytes_1 = b"\xfe\xfc\xd9\xbc\x85\xe7 \x016\x06;\nk\xa0"
        set_0 = None
        bytes_2 = b"H\xa1\xfc\x9d\x9b\xe7O\xd7\xcd\x9cU\xce\xcayL\x0b\x07"
        neural_port_nm_tensor_mismatch_error_1 = module_0.NeuralPortNmTensorMismatchError(
            bytes_1, neural_type_1, set_0, bytes_2, neural_port_nm_tensor_mismatch_error_0
        )
        assert (
            neural_port_nm_tensor_mismatch_error_1.message
            == """
In b'\\xfe\\xfc\\xd9\\xbc\\x85\\xe7 \\x016\\x06;\\nk\\xa0'.
Port: axes: None; elements_type: VoidType and a NmTensor it was fed are
of incompatible neural types:

None

 and

b'H\\xa1\\xfc\\x9d\\x9b\\xe7O\\xd7\\xcd\\x9cU\\xce\\xcayL\\x0b\\x07'

Type comparison result: """
        )
        neural_port_nm_tensor_mismatch_error_2 = module_0.NeuralPortNmTensorMismatchError(
            neural_port_nm_tensor_mismatch_error_0,
            int_1,
            neural_port_nm_tensor_mismatch_error_0,
            element_type_0,
            str_1,
        )
        assert (
            neural_port_nm_tensor_mismatch_error_2.message
            == """
In .
Port: 188 and a NmTensor it was fed are
of incompatible neural types:



 and

None

Type comparison result: :bD"""
        )
        var_3 = neural_type_0.compare_and_raise_error(
            bool_0, bytes_0, neural_type_0)
        assert var_3 is None
        neural_type_2 = module_0.NeuralType(list_1)
    except BaseException:
        pass


def test_case_1():
    try:
        str_0 = "qW(\x0b7D$X"
        bool_0 = True
        neural_type_0 = module_0.NeuralType()
        assert neural_type_0.axes is None
        assert neural_type_0.optional is False
        list_0 = []
        element_type_0 = module_2.ElementType(*list_0)
        assert element_type_0 is not None
        neural_port_nm_tensor_mismatch_error_0 = module_0.NeuralPortNmTensorMismatchError(
            bool_0, neural_type_0, str_0, neural_type_0, element_type_0
        )
        assert (
            neural_port_nm_tensor_mismatch_error_0.message
            == """
In True.
Port: axes: None; elements_type: VoidType and a NmTensor it was fed are
of incompatible neural types:

qW(7D$X

 and

axes: None; elements_type: VoidType

Type comparison result: Abstract class defining semantics of the tensor elements. We are relying on Python for inheritance checking"""
        )
        neural_type_comparison_result_0 = neural_type_0.compare(neural_type_0)
        assert neural_type_comparison_result_0 == module_1.NeuralTypeComparisonResult.SAME
        assert module_1.NeuralTypeComparisonResult.SAME == module_1.NeuralTypeComparisonResult.SAME
        assert module_1.NeuralTypeComparisonResult.LESS == module_1.NeuralTypeComparisonResult.LESS
        assert module_1.NeuralTypeComparisonResult.GREATER == module_1.NeuralTypeComparisonResult.GREATER
        assert (
            module_1.NeuralTypeComparisonResult.DIM_INCOMPATIBLE
            == module_1.NeuralTypeComparisonResult.DIM_INCOMPATIBLE
        )
        assert module_1.NeuralTypeComparisonResult.TRANSPOSE_SAME == module_1.NeuralTypeComparisonResult.TRANSPOSE_SAME
        assert (
            module_1.NeuralTypeComparisonResult.CONTAINER_SIZE_MISMATCH
            == module_1.NeuralTypeComparisonResult.CONTAINER_SIZE_MISMATCH
        )
        assert module_1.NeuralTypeComparisonResult.INCOMPATIBLE == module_1.NeuralTypeComparisonResult.INCOMPATIBLE
        assert (
            module_1.NeuralTypeComparisonResult.SAME_TYPE_INCOMPATIBLE_PARAMS
            == module_1.NeuralTypeComparisonResult.SAME_TYPE_INCOMPATIBLE_PARAMS
        )
        assert module_1.NeuralTypeComparisonResult.UNCHECKED == module_1.NeuralTypeComparisonResult.UNCHECKED
        dict_0 = {
            element_type_0: neural_type_0,
            bool_0: neural_type_comparison_result_0,
            str_0: str_0,
            str_0: neural_type_0,
        }
        set_0 = None
        neural_port_nm_tensor_mismatch_error_1 = module_0.NeuralPortNmTensorMismatchError(
            str_0, neural_port_nm_tensor_mismatch_error_0, neural_type_comparison_result_0, dict_0, set_0
        )
        assert (
            neural_port_nm_tensor_mismatch_error_1.message
            == """
In qW(7D$X.
Port:  and a NmTensor it was fed are
of incompatible neural types:

NeuralTypeComparisonResult.SAME

 and

{ElementType: NeuralType(axis=None, element_type=VoidType), True: <NeuralTypeComparisonResult.SAME: 0>, 'qW(\\x0b7D$X': NeuralType(axis=None, element_type=VoidType)}

Type comparison result: None"""
        )
        element_type_1 = module_2.ElementType()
        assert element_type_1 is not None
        str_1 = "dD]"
        neural_type_1 = module_0.NeuralType(str_1)
    except BaseException:
        pass


def test_case_2():
    try:
        bool_0 = True
        tuple_0 = (bool_0,)
        element_type_0 = module_2.ElementType()
        neural_type_0 = module_0.NeuralType(tuple_0, element_type_0)
    except BaseException:
        pass


def test_case_3():
    try:
        neural_type_0 = module_0.NeuralType()
        assert neural_type_0.axes is None
        assert neural_type_0.optional is False
        list_0 = None
        str_0 = "KIKINET"
        str_1 = "win"
        var_0 = neural_type_0.compare_and_raise_error(
            str_1, list_0, neural_type_0)
        assert var_0 is None
        list_1 = []
        neural_type_error_0 = module_0.NeuralTypeError(*list_1)
        assert neural_type_error_0 is not None
        neural_type_1 = module_0.NeuralType()
        assert neural_type_1.axes is None
        assert neural_type_1.optional is False
        dict_0 = {str_0: neural_type_error_0, str_0: neural_type_1}
        var_1 = neural_type_0.__repr__()
        assert var_1 == "NeuralType(axis=None, element_type=VoidType)"
        neural_type_error_1 = module_0.NeuralTypeError(**dict_0)
    except BaseException:
        pass


def test_case_4():
    try:
        neural_type_error_0 = module_0.NeuralTypeError()
        neural_port_name_mismatch_error_0 = module_0.NeuralPortNameMismatchError(
            neural_type_error_0)
        assert neural_port_name_mismatch_error_0.message == "Wrong input port name: "
        float_0 = 0.001
        int_0 = -2470
        bool_0 = True
        tuple_0 = float_0, int_0, bool_0
        neural_type_0 = module_0.NeuralType()
        assert neural_type_error_0 is not None
        assert neural_type_0.axes is None
        assert neural_type_0.optional is False
        var_0 = neural_type_0.__eq__(tuple_0)
        assert var_0 is False
        element_type_0 = module_2.ElementType()
        assert element_type_0 is not None
        neural_type_comparison_result_0 = element_type_0.compare(
            neural_port_name_mismatch_error_0)
        assert neural_type_comparison_result_0 == module_1.NeuralTypeComparisonResult.INCOMPATIBLE
        assert module_1.NeuralTypeComparisonResult.SAME == module_1.NeuralTypeComparisonResult.SAME
        assert module_1.NeuralTypeComparisonResult.LESS == module_1.NeuralTypeComparisonResult.LESS
        assert module_1.NeuralTypeComparisonResult.GREATER == module_1.NeuralTypeComparisonResult.GREATER
        assert (
            module_1.NeuralTypeComparisonResult.DIM_INCOMPATIBLE
            == module_1.NeuralTypeComparisonResult.DIM_INCOMPATIBLE
        )
        assert module_1.NeuralTypeComparisonResult.TRANSPOSE_SAME == module_1.NeuralTypeComparisonResult.TRANSPOSE_SAME
        assert (
            module_1.NeuralTypeComparisonResult.CONTAINER_SIZE_MISMATCH
            == module_1.NeuralTypeComparisonResult.CONTAINER_SIZE_MISMATCH
        )
        assert module_1.NeuralTypeComparisonResult.INCOMPATIBLE == module_1.NeuralTypeComparisonResult.INCOMPATIBLE
        assert (
            module_1.NeuralTypeComparisonResult.SAME_TYPE_INCOMPATIBLE_PARAMS
            == module_1.NeuralTypeComparisonResult.SAME_TYPE_INCOMPATIBLE_PARAMS
        )
        assert module_1.NeuralTypeComparisonResult.UNCHECKED == module_1.NeuralTypeComparisonResult.UNCHECKED
        int_1 = -1685
        bool_1 = False
        tuple_1 = (bool_1,)
        bool_2 = True
        dict_0 = {int_1: element_type_0}
        tuple_2 = neural_type_comparison_result_0, tuple_1, bool_2, dict_0
        int_2 = None
        bool_3 = False
        neural_port_nm_tensor_mismatch_error_0 = module_0.NeuralPortNmTensorMismatchError(
            neural_type_comparison_result_0, int_1, tuple_2, int_2, bool_3
        )
        assert (
            neural_port_nm_tensor_mismatch_error_0.message
            == """
In NeuralTypeComparisonResult.INCOMPATIBLE.
Port: -1685 and a NmTensor it was fed are
of incompatible neural types:

(<NeuralTypeComparisonResult.INCOMPATIBLE: 6>, (False,), True, {-1685: ElementType})

 and

None

Type comparison result: False"""
        )
        set_0 = set()
        neural_type_1 = module_0.NeuralType(element_type_0, set_0)
    except BaseException:
        pass


def test_case_5():
    try:
        int_0 = -1745
        neural_type_error_0 = module_0.NeuralTypeError()
        neural_port_name_mismatch_error_0 = module_0.NeuralPortNameMismatchError(
            neural_type_error_0)
        assert neural_port_name_mismatch_error_0.message == "Wrong input port name: "
        element_type_0 = module_2.ElementType()
        var_0 = element_type_0.__str__()
        str_0 = """
    Default configuration for Adam optimizer.

    .. note::
        For the details on the function/meanings of the arguments, please refer to:
        https://pytorch.org/docs/stable/optim.html?highlight=sgd#torch.optim.SGD
    """
        dict_0 = {}
        neural_type_error_1 = module_0.NeuralTypeError()
        bool_0 = False
        neural_type_0 = module_0.NeuralType()
        assert neural_type_error_0 is not None
        assert element_type_0 is not None
        assert neural_type_error_1 is not None
        assert neural_type_0.axes is None
        assert neural_type_0.optional is False
        var_1 = neural_type_0.__str__()
        assert var_1 == "axes: None; elements_type: VoidType"
        tuple_0 = str_0, dict_0, int_0, bool_0
        neural_type_1 = module_0.NeuralType(tuple_0)
    except BaseException:
        pass
