# coding=utf-8
# Automatically generated by Pynguin.
import mridc.utils.formaters.base as module_0


def test_case_0():
    try:
        bool_0 = True
        base_formatter_0 = module_0.BaseFormatter(bool_0)
        assert base_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
        assert module_0.ForegroundColors.BLACK == "\x1b[30m"
        assert module_0.ForegroundColors.BLUE == "\x1b[34m"
        assert module_0.ForegroundColors.CYAN == "\x1b[36m"
        assert module_0.ForegroundColors.GREEN == "\x1b[32m"
        assert module_0.ForegroundColors.LIGHTBLACK_EX == "\x1b[90m"
        assert module_0.ForegroundColors.LIGHTBLUE_EX == "\x1b[94m"
        assert module_0.ForegroundColors.LIGHTCYAN_EX == "\x1b[96m"
        assert module_0.ForegroundColors.LIGHTGREEN_EX == "\x1b[92m"
        assert module_0.ForegroundColors.LIGHTMAGENTA_EX == "\x1b[95m"
        assert module_0.ForegroundColors.LIGHTRED_EX == "\x1b[91m"
        assert module_0.ForegroundColors.LIGHTWHITE_EX == "\x1b[97m"
        assert module_0.ForegroundColors.LIGHTYELLOW_EX == "\x1b[93m"
        assert module_0.ForegroundColors.MAGENTA == "\x1b[35m"
        assert module_0.ForegroundColors.RED == "\x1b[31m"
        assert module_0.ForegroundColors.RESET == "\x1b[39m"
        assert module_0.ForegroundColors.WHITE == "\x1b[37m"
        assert module_0.ForegroundColors.YELLOW == "\x1b[33m"
        assert (
            module_0.BaseFormatter.DEFAULT_FORMAT
            == "%(color)s[%(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"
        )
        assert module_0.BaseFormatter.DEFAULT_DATE_FORMAT == "%Y-%m-%d %H:%M:%S"
        assert module_0.BaseFormatter.DEFAULT_COLORS == {
            (10): "\x1b[36m",
            (20): "\x1b[32m",
            (30): "\x1b[33m",
            (40): "\x1b[35m",
            (50): "\x1b[31m",
        }
        int_0 = 91
        str_0 = "NtC\ta.aT$F"
        set_0 = {str_0, bool_0, int_0}
        bytes_0 = b"@S\t\xa6\x80\x18\xffe\xedp\x81l\x85\x81\xb8\xe6\xeb\xee"
        base_m_r_i_d_c_formatter_0 = module_0.BaseMRIDCFormatter(
            set_0, bytes_0)
        assert base_m_r_i_d_c_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
        assert (
            module_0.BaseMRIDCFormatter.DEFAULT_FORMAT
            == "%(color)s[MRIDC %(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"
        )
        debug_m_r_i_d_c_formatter_0 = module_0.DebugMRIDCFormatter(
            int_0, str_0)
        assert debug_m_r_i_d_c_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
        assert (
            module_0.DebugMRIDCFormatter.DEFAULT_FORMAT
            == "%(color)s[MRIDC %(levelname)1.1s %(asctime)s %(module)s:%(lineno)d rank:%(rank)s]%(end_color)s %(message)s"
        )
        var_0 = base_formatter_0.format(debug_m_r_i_d_c_formatter_0)
    except BaseException:
        pass


def test_case_1():
    try:
        int_0 = -2537
        str_0 = "ahu y"
        float_0 = None
        str_1 = "RELU"
        base_m_r_i_d_c_formatter_0 = None
        debug_m_r_i_d_c_formatter_0 = module_0.DebugMRIDCFormatter(
            float_0, base_m_r_i_d_c_formatter_0)
        assert debug_m_r_i_d_c_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
        assert module_0.ForegroundColors.BLACK == "\x1b[30m"
        assert module_0.ForegroundColors.BLUE == "\x1b[34m"
        assert module_0.ForegroundColors.CYAN == "\x1b[36m"
        assert module_0.ForegroundColors.GREEN == "\x1b[32m"
        assert module_0.ForegroundColors.LIGHTBLACK_EX == "\x1b[90m"
        assert module_0.ForegroundColors.LIGHTBLUE_EX == "\x1b[94m"
        assert module_0.ForegroundColors.LIGHTCYAN_EX == "\x1b[96m"
        assert module_0.ForegroundColors.LIGHTGREEN_EX == "\x1b[92m"
        assert module_0.ForegroundColors.LIGHTMAGENTA_EX == "\x1b[95m"
        assert module_0.ForegroundColors.LIGHTRED_EX == "\x1b[91m"
        assert module_0.ForegroundColors.LIGHTWHITE_EX == "\x1b[97m"
        assert module_0.ForegroundColors.LIGHTYELLOW_EX == "\x1b[93m"
        assert module_0.ForegroundColors.MAGENTA == "\x1b[35m"
        assert module_0.ForegroundColors.RED == "\x1b[31m"
        assert module_0.ForegroundColors.RESET == "\x1b[39m"
        assert module_0.ForegroundColors.WHITE == "\x1b[37m"
        assert module_0.ForegroundColors.YELLOW == "\x1b[33m"
        assert (
            module_0.DebugMRIDCFormatter.DEFAULT_FORMAT
            == "%(color)s[MRIDC %(levelname)1.1s %(asctime)s %(module)s:%(lineno)d rank:%(rank)s]%(end_color)s %(message)s"
        )
        base_formatter_0 = module_0.BaseFormatter(
            str_0, float_0, str_1, debug_m_r_i_d_c_formatter_0)
        assert base_formatter_0.datefmt == "RELU"
        assert (
            module_0.BaseFormatter.DEFAULT_FORMAT
            == "%(color)s[%(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"
        )
        assert module_0.BaseFormatter.DEFAULT_DATE_FORMAT == "%Y-%m-%d %H:%M:%S"
        assert module_0.BaseFormatter.DEFAULT_COLORS == {
            (10): "\x1b[36m",
            (20): "\x1b[32m",
            (30): "\x1b[33m",
            (40): "\x1b[35m",
            (50): "\x1b[31m",
        }
        str_2 = "H 4_/t<\n"
        base_m_r_i_d_c_formatter_1 = module_0.BaseMRIDCFormatter(
            base_formatter_0, int_0, str_2)
        assert base_m_r_i_d_c_formatter_1.datefmt == "H 4_/t<\n"
        assert (
            module_0.BaseMRIDCFormatter.DEFAULT_FORMAT
            == "%(color)s[MRIDC %(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"
        )
        str_3 = "Bi\r{OdOwb='x\tB"
        float_1 = 4.9
        set_0 = set()
        str_4 = "J:tX"
        base_formatter_1 = module_0.BaseFormatter(str_4)
        assert base_formatter_1.datefmt == "%Y-%m-%d %H:%M:%S"
        tuple_0 = ()
        bool_0 = None
        base_m_r_i_d_c_formatter_2 = module_0.BaseMRIDCFormatter(
            tuple_0, bool_0)
        assert base_m_r_i_d_c_formatter_2.datefmt == "%Y-%m-%d %H:%M:%S"
        tuple_1 = float_1, set_0, base_formatter_1, base_m_r_i_d_c_formatter_2
        base_formatter_2 = module_0.BaseFormatter(str_3, tuple_1)
        assert base_formatter_2.datefmt == "%Y-%m-%d %H:%M:%S"
        var_0 = base_formatter_2.format(base_m_r_i_d_c_formatter_1)
    except BaseException:
        pass


def test_case_2():
    try:
        list_0 = []
        int_0 = -1981
        complex_0 = None
        tuple_0 = complex_0, list_0, list_0
        base_formatter_0 = module_0.BaseFormatter(tuple_0, int_0)
        assert base_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
        assert module_0.ForegroundColors.BLACK == "\x1b[30m"
        assert module_0.ForegroundColors.BLUE == "\x1b[34m"
        assert module_0.ForegroundColors.CYAN == "\x1b[36m"
        assert module_0.ForegroundColors.GREEN == "\x1b[32m"
        assert module_0.ForegroundColors.LIGHTBLACK_EX == "\x1b[90m"
        assert module_0.ForegroundColors.LIGHTBLUE_EX == "\x1b[94m"
        assert module_0.ForegroundColors.LIGHTCYAN_EX == "\x1b[96m"
        assert module_0.ForegroundColors.LIGHTGREEN_EX == "\x1b[92m"
        assert module_0.ForegroundColors.LIGHTMAGENTA_EX == "\x1b[95m"
        assert module_0.ForegroundColors.LIGHTRED_EX == "\x1b[91m"
        assert module_0.ForegroundColors.LIGHTWHITE_EX == "\x1b[97m"
        assert module_0.ForegroundColors.LIGHTYELLOW_EX == "\x1b[93m"
        assert module_0.ForegroundColors.MAGENTA == "\x1b[35m"
        assert module_0.ForegroundColors.RED == "\x1b[31m"
        assert module_0.ForegroundColors.RESET == "\x1b[39m"
        assert module_0.ForegroundColors.WHITE == "\x1b[37m"
        assert module_0.ForegroundColors.YELLOW == "\x1b[33m"
        assert (
            module_0.BaseFormatter.DEFAULT_FORMAT
            == "%(color)s[%(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"
        )
        assert module_0.BaseFormatter.DEFAULT_DATE_FORMAT == "%Y-%m-%d %H:%M:%S"
        assert module_0.BaseFormatter.DEFAULT_COLORS == {
            (10): "\x1b[36m",
            (20): "\x1b[32m",
            (30): "\x1b[33m",
            (40): "\x1b[35m",
            (50): "\x1b[31m",
        }
        base_m_r_i_d_c_formatter_0 = module_0.BaseMRIDCFormatter(
            base_formatter_0, tuple_0)
        assert base_m_r_i_d_c_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
        assert (
            module_0.BaseMRIDCFormatter.DEFAULT_FORMAT
            == "%(color)s[MRIDC %(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"
        )
        base_m_r_i_d_c_formatter_1 = module_0.BaseMRIDCFormatter(
            int_0, base_m_r_i_d_c_formatter_0)
        assert base_m_r_i_d_c_formatter_1.datefmt == "%Y-%m-%d %H:%M:%S"
        base_formatter_1 = module_0.BaseFormatter(base_m_r_i_d_c_formatter_1)
        assert base_formatter_1.datefmt == "%Y-%m-%d %H:%M:%S"
        str_0 = "\\&hi5\r]NhfL-GwBrZA"
        base_m_r_i_d_c_formatter_2 = module_0.BaseMRIDCFormatter(int_0, str_0)
        assert base_m_r_i_d_c_formatter_2.datefmt == "%Y-%m-%d %H:%M:%S"
        float_0 = -602.926964
        debug_m_r_i_d_c_formatter_0 = module_0.DebugMRIDCFormatter()
        assert debug_m_r_i_d_c_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
        assert (
            module_0.DebugMRIDCFormatter.DEFAULT_FORMAT
            == "%(color)s[MRIDC %(levelname)1.1s %(asctime)s %(module)s:%(lineno)d rank:%(rank)s]%(end_color)s %(message)s"
        )
        float_1 = 1101.558147
        base_m_r_i_d_c_formatter_3 = module_0.BaseMRIDCFormatter(
            int_0, float_1)
        assert base_m_r_i_d_c_formatter_3.datefmt == "%Y-%m-%d %H:%M:%S"
        base_formatter_2 = module_0.BaseFormatter(float_0)
        assert base_formatter_2.datefmt == "%Y-%m-%d %H:%M:%S"
        var_0 = base_formatter_2.format(list_0)
    except BaseException:
        pass


def test_case_3():
    try:
        debug_m_r_i_d_c_formatter_0 = None
        tuple_0 = (debug_m_r_i_d_c_formatter_0,)
        str_0 = "<0'U[v\"blH?S"
        bytes_0 = b"\xf9\x10\x87\x02\xed\xa9mv\x1c\xcc\xf1\xdeL\xae"
        base_m_r_i_d_c_formatter_0 = module_0.BaseMRIDCFormatter(
            debug_m_r_i_d_c_formatter_0, bytes_0)
        assert base_m_r_i_d_c_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
        assert module_0.ForegroundColors.BLACK == "\x1b[30m"
        assert module_0.ForegroundColors.BLUE == "\x1b[34m"
        assert module_0.ForegroundColors.CYAN == "\x1b[36m"
        assert module_0.ForegroundColors.GREEN == "\x1b[32m"
        assert module_0.ForegroundColors.LIGHTBLACK_EX == "\x1b[90m"
        assert module_0.ForegroundColors.LIGHTBLUE_EX == "\x1b[94m"
        assert module_0.ForegroundColors.LIGHTCYAN_EX == "\x1b[96m"
        assert module_0.ForegroundColors.LIGHTGREEN_EX == "\x1b[92m"
        assert module_0.ForegroundColors.LIGHTMAGENTA_EX == "\x1b[95m"
        assert module_0.ForegroundColors.LIGHTRED_EX == "\x1b[91m"
        assert module_0.ForegroundColors.LIGHTWHITE_EX == "\x1b[97m"
        assert module_0.ForegroundColors.LIGHTYELLOW_EX == "\x1b[93m"
        assert module_0.ForegroundColors.MAGENTA == "\x1b[35m"
        assert module_0.ForegroundColors.RED == "\x1b[31m"
        assert module_0.ForegroundColors.RESET == "\x1b[39m"
        assert module_0.ForegroundColors.WHITE == "\x1b[37m"
        assert module_0.ForegroundColors.YELLOW == "\x1b[33m"
        assert (
            module_0.BaseMRIDCFormatter.DEFAULT_FORMAT
            == "%(color)s[MRIDC %(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"
        )
        base_formatter_0 = module_0.BaseFormatter(str_0)
        assert base_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
        assert (
            module_0.BaseFormatter.DEFAULT_FORMAT
            == "%(color)s[%(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"
        )
        assert module_0.BaseFormatter.DEFAULT_DATE_FORMAT == "%Y-%m-%d %H:%M:%S"
        assert module_0.BaseFormatter.DEFAULT_COLORS == {
            (10): "\x1b[36m",
            (20): "\x1b[32m",
            (30): "\x1b[33m",
            (40): "\x1b[35m",
            (50): "\x1b[31m",
        }
        debug_m_r_i_d_c_formatter_1 = module_0.DebugMRIDCFormatter()
        assert debug_m_r_i_d_c_formatter_1.datefmt == "%Y-%m-%d %H:%M:%S"
        assert (
            module_0.DebugMRIDCFormatter.DEFAULT_FORMAT
            == "%(color)s[MRIDC %(levelname)1.1s %(asctime)s %(module)s:%(lineno)d rank:%(rank)s]%(end_color)s %(message)s"
        )
        base_m_r_i_d_c_formatter_1 = module_0.BaseMRIDCFormatter(tuple_0)
        assert base_m_r_i_d_c_formatter_1.datefmt == "%Y-%m-%d %H:%M:%S"
        list_0 = [base_formatter_0, str_0]
        var_0 = base_formatter_0.format(list_0)
    except BaseException:
        pass


def test_case_4():
    try:
        bytes_0 = b""
        base_formatter_0 = module_0.BaseFormatter(bytes_0)
        assert base_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
        assert module_0.ForegroundColors.BLACK == "\x1b[30m"
        assert module_0.ForegroundColors.BLUE == "\x1b[34m"
        assert module_0.ForegroundColors.CYAN == "\x1b[36m"
        assert module_0.ForegroundColors.GREEN == "\x1b[32m"
        assert module_0.ForegroundColors.LIGHTBLACK_EX == "\x1b[90m"
        assert module_0.ForegroundColors.LIGHTBLUE_EX == "\x1b[94m"
        assert module_0.ForegroundColors.LIGHTCYAN_EX == "\x1b[96m"
        assert module_0.ForegroundColors.LIGHTGREEN_EX == "\x1b[92m"
        assert module_0.ForegroundColors.LIGHTMAGENTA_EX == "\x1b[95m"
        assert module_0.ForegroundColors.LIGHTRED_EX == "\x1b[91m"
        assert module_0.ForegroundColors.LIGHTWHITE_EX == "\x1b[97m"
        assert module_0.ForegroundColors.LIGHTYELLOW_EX == "\x1b[93m"
        assert module_0.ForegroundColors.MAGENTA == "\x1b[35m"
        assert module_0.ForegroundColors.RED == "\x1b[31m"
        assert module_0.ForegroundColors.RESET == "\x1b[39m"
        assert module_0.ForegroundColors.WHITE == "\x1b[37m"
        assert module_0.ForegroundColors.YELLOW == "\x1b[33m"
        assert (
            module_0.BaseFormatter.DEFAULT_FORMAT
            == "%(color)s[%(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"
        )
        assert module_0.BaseFormatter.DEFAULT_DATE_FORMAT == "%Y-%m-%d %H:%M:%S"
        assert module_0.BaseFormatter.DEFAULT_COLORS == {
            (10): "\x1b[36m",
            (20): "\x1b[32m",
            (30): "\x1b[33m",
            (40): "\x1b[35m",
            (50): "\x1b[31m",
        }
        bool_0 = True
        float_0 = 1195.089503
        base_formatter_1 = module_0.BaseFormatter(bool_0, float_0)
        assert base_formatter_1.datefmt == "%Y-%m-%d %H:%M:%S"
        var_0 = base_formatter_1.format(base_formatter_0)
    except BaseException:
        pass


def test_case_5():
    try:
        bool_0 = False
        str_0 = "quantitative_module_padding_size"
        str_1 = "&W28&Hjk<`]ZbX. 5Lf"
        base_formatter_0 = module_0.BaseFormatter(str_0, str_1)
        assert base_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
        assert module_0.ForegroundColors.BLACK == "\x1b[30m"
        assert module_0.ForegroundColors.BLUE == "\x1b[34m"
        assert module_0.ForegroundColors.CYAN == "\x1b[36m"
        assert module_0.ForegroundColors.GREEN == "\x1b[32m"
        assert module_0.ForegroundColors.LIGHTBLACK_EX == "\x1b[90m"
        assert module_0.ForegroundColors.LIGHTBLUE_EX == "\x1b[94m"
        assert module_0.ForegroundColors.LIGHTCYAN_EX == "\x1b[96m"
        assert module_0.ForegroundColors.LIGHTGREEN_EX == "\x1b[92m"
        assert module_0.ForegroundColors.LIGHTMAGENTA_EX == "\x1b[95m"
        assert module_0.ForegroundColors.LIGHTRED_EX == "\x1b[91m"
        assert module_0.ForegroundColors.LIGHTWHITE_EX == "\x1b[97m"
        assert module_0.ForegroundColors.LIGHTYELLOW_EX == "\x1b[93m"
        assert module_0.ForegroundColors.MAGENTA == "\x1b[35m"
        assert module_0.ForegroundColors.RED == "\x1b[31m"
        assert module_0.ForegroundColors.RESET == "\x1b[39m"
        assert module_0.ForegroundColors.WHITE == "\x1b[37m"
        assert module_0.ForegroundColors.YELLOW == "\x1b[33m"
        assert (
            module_0.BaseFormatter.DEFAULT_FORMAT
            == "%(color)s[%(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"
        )
        assert module_0.BaseFormatter.DEFAULT_DATE_FORMAT == "%Y-%m-%d %H:%M:%S"
        assert module_0.BaseFormatter.DEFAULT_COLORS == {
            (10): "\x1b[36m",
            (20): "\x1b[32m",
            (30): "\x1b[33m",
            (40): "\x1b[35m",
            (50): "\x1b[31m",
        }
        var_0 = base_formatter_0.format(bool_0)
    except BaseException:
        pass
