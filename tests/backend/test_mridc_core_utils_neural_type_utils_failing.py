# coding=utf-8
# Automatically generated by Pynguin.
import mridc.core.neural_types.elements as module_1
import mridc.core.neural_types.neural_type as module_2
import mridc.core.utils.neural_type_utils as module_0


def test_case_0():
    try:
        str_0 = "Q"
        bytes_0 = None
        int_0 = 93
        tuple_0 = bytes_0, int_0
        dict_0 = {int_0: str_0}
        str_1 = "bcZL@Y"
        list_0 = [str_1]
        var_0 = module_0.get_io_names(dict_0, list_0)
        assert var_0 == [93]
        var_1 = module_0.get_dynamic_axes(tuple_0, tuple_0)
    except BaseException:
        pass


def test_case_1():
    try:
        str_0 = """
    This is the main class which would represent neural type concept. It is used to represent *the types* of inputs and
     outputs.

    Parameters
    ----------
    axes: a tuple of AxisTypes objects representing the semantics of what varying each axis means. You can use a short,
     string-based form here. For example: ('B', 'C', 'H', 'W') would correspond to an NCHW format frequently used in
     computer vision. ('B', 'T', 'D') is frequently used for signal processing and means
     [batch, time, dimension/channel].
    elements_type: an instance of ElementType class representing the semantics of what is stored inside the tensor.
    For example: logits (LogitsType), log probabilities (LogprobType), etc.
    optional: By default, this is false. If set to True, it would mean that input to the port of this type can be
    optional.
    """
        list_0 = [str_0]
        bytes_0 = b"\x02\xd7*\xcfR#|\xa7"
        var_0 = module_0.get_io_names(list_0, bytes_0)
    except BaseException:
        pass


def test_case_2():
    try:
        tuple_0 = ()
        dict_0 = {}
        element_type_0 = module_1.ElementType(**dict_0)
        neural_type_comparison_result_0 = element_type_0.compare(tuple_0)
        int_0 = 40
        var_0 = module_0.get_io_names(neural_type_comparison_result_0, int_0)
    except BaseException:
        pass


def test_case_3():
    try:
        element_type_0 = module_1.ElementType()
        neural_type_0 = module_2.NeuralType(element_type_0)
    except BaseException:
        pass


def test_case_4():
    try:
        neural_type_0 = None
        bool_0 = True
        str_0 = "p2"
        list_0 = [str_0, bool_0, neural_type_0]
        element_type_0 = module_1.ElementType(*list_0)
    except BaseException:
        pass


def test_case_5():
    try:
        tuple_0 = ()
        str_0 = "5\x0b5r9_g )6"
        var_0 = module_0.get_dynamic_axes(tuple_0, str_0)
        assert var_0 == {}
        element_type_0 = None
        set_0 = {element_type_0}
        list_0 = [element_type_0, set_0, set_0]
        element_type_1 = module_1.ElementType(*list_0)
    except BaseException:
        pass


def test_case_6():
    try:
        str_0 = "gfMN:CEAD%yU!Pq()i%C"
        neural_type_0 = module_2.NeuralType()
        var_0 = neural_type_0.__repr__()
        var_1 = module_0.extract_dynamic_axes(str_0, neural_type_0)
        assert neural_type_0.axes is None
        assert neural_type_0.optional is False
        assert var_1 == {}
    except BaseException:
        pass
