# coding=utf-8
# Automatically generated by Pynguin.
import mridc.collections.reconstruction.models.rim.rnn_cells as module_0


def test_case_0():
    try:
        str_0 = "Cannot start timer = '"
        float_0 = 1185.25
        bytes_0 = b"\xf1\xf9\x9eu\x13\x19"
        tuple_0 = float_0, bytes_0
        tuple_1 = tuple_0, str_0, tuple_0
        list_0 = [float_0, tuple_1, bytes_0]
        str_1 = "I6}^B*(Mrh=XmewA"
        set_0 = {float_0, str_1, tuple_1}
        int_0 = 2995
        bool_0 = False
        str_2 = "K*Mhv.gNeb@s"
        conv_m_g_u_cell_0 = module_0.ConvMGUCell(set_0, int_0, bool_0, str_2, list_0)
    except BaseException:
        pass


def test_case_1():
    try:
        conv_m_g_u_cell_base_0 = None
        bytes_0 = b"\x17_\n\xb9\x1e\xa2_d\x0fZ\x85\xc9N"
        bool_0 = False
        tuple_0 = None
        conv_g_r_u_cell_base_0 = module_0.ConvGRUCellBase(
            conv_m_g_u_cell_base_0, bytes_0, bool_0, conv_m_g_u_cell_base_0, tuple_0, conv_m_g_u_cell_base_0
        )
    except BaseException:
        pass


def test_case_2():
    try:
        str_0 = "rw^Pf@\x0bU%@3K"
        float_0 = -620.458312
        float_1 = -413.84748
        tuple_0 = ()
        conv_m_g_u_cell_0 = module_0.ConvMGUCell(str_0, float_0, float_1, tuple_0)
    except BaseException:
        pass


def test_case_3():
    try:
        bool_0 = False
        int_0 = -1458
        str_0 = "$b'L\x0bfBS3JR="
        float_0 = 3462.34
        ind_r_n_n_cell_0 = module_0.IndRNNCell(float_0, int_0, bool_0, str_0, float_0)
    except BaseException:
        pass


def test_case_4():
    try:
        bytes_0 = b"\xd0L\x9e\xdbD"
        dict_0 = {bytes_0: bytes_0}
        conv_g_r_u_cell_base_0 = None
        var_0 = conv_g_r_u_cell_base_0.determine_conv_class(dict_0)
    except BaseException:
        pass


def test_case_5():
    try:
        bool_0 = True
        str_0 = "'%v?a\"@@hW)qX"
        bytes_0 = b"+]\r)h\x08\x8b"
        dict_0 = {}
        str_1 = "[i9"
        ind_r_n_n_cell_base_0 = module_0.IndRNNCellBase(bytes_0, str_0, dict_0, str_1, dict_0, bool_0)
    except BaseException:
        pass


def test_case_6():
    try:
        str_0 = "T8K%XgEqY~Q\x0c`e"
        list_0 = [str_0, str_0]
        int_0 = 5883
        conv_g_r_u_cell_0 = module_0.ConvGRUCell(list_0, list_0, int_0, int_0)
    except BaseException:
        pass


def test_case_7():
    try:
        str_0 = "LogMode"
        int_0 = -2063
        str_1 = ""
        list_0 = [str_1]
        conv_g_r_u_cell_0 = module_0.ConvGRUCell(int_0, str_1, str_0, list_0)
    except BaseException:
        pass


def test_case_8():
    try:
        str_0 = "&px2k+\x0cM=?01>%q=x"
        bytes_0 = b"\x91\xb70-"
        conv_m_g_u_cell_0 = module_0.ConvMGUCell(str_0, str_0, str_0, bytes_0)
    except BaseException:
        pass


def test_case_9():
    try:
        set_0 = None
        bool_0 = True
        bytes_0 = b"\x925\xde\xe7wuB\xd2eZR."
        str_0 = "n~*0SXm'8cOM^,~4}"
        conv_g_r_u_cell_0 = module_0.ConvGRUCell(str_0, set_0, bool_0, bytes_0, bool_0)
    except BaseException:
        pass


def test_case_10():
    try:
        bytes_0 = None
        str_0 = '}#"SCd/3sh\x0c'
        bool_0 = True
        float_0 = 615.7
        set_0 = {bytes_0}
        dict_0 = {}
        conv_m_g_u_cell_base_0 = module_0.ConvMGUCellBase(bytes_0, str_0, bool_0, float_0, set_0, dict_0)
    except BaseException:
        pass
