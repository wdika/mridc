# coding=utf-8
# Automatically generated by Pynguin.
import mridc.utils.formaters.base as module_0


def test_case_0():
    str_0 = "913$Ogm#6+\r5kbw~Bw&"
    debug_m_r_i_d_c_formatter_0 = None
    debug_m_r_i_d_c_formatter_1 = module_0.DebugMRIDCFormatter(debug_m_r_i_d_c_formatter_0)
    assert debug_m_r_i_d_c_formatter_1.datefmt == "%Y-%m-%d %H:%M:%S"
    assert module_0.ForegroundColors.BLACK == "\x1b[30m"
    assert module_0.ForegroundColors.BLUE == "\x1b[34m"
    assert module_0.ForegroundColors.CYAN == "\x1b[36m"
    assert module_0.ForegroundColors.GREEN == "\x1b[32m"
    assert module_0.ForegroundColors.LIGHTBLACK_EX == "\x1b[90m"
    assert module_0.ForegroundColors.LIGHTBLUE_EX == "\x1b[94m"
    assert module_0.ForegroundColors.LIGHTCYAN_EX == "\x1b[96m"
    assert module_0.ForegroundColors.LIGHTGREEN_EX == "\x1b[92m"
    assert module_0.ForegroundColors.LIGHTMAGENTA_EX == "\x1b[95m"
    assert module_0.ForegroundColors.LIGHTRED_EX == "\x1b[91m"
    assert module_0.ForegroundColors.LIGHTWHITE_EX == "\x1b[97m"
    assert module_0.ForegroundColors.LIGHTYELLOW_EX == "\x1b[93m"
    assert module_0.ForegroundColors.MAGENTA == "\x1b[35m"
    assert module_0.ForegroundColors.RED == "\x1b[31m"
    assert module_0.ForegroundColors.RESET == "\x1b[39m"
    assert module_0.ForegroundColors.WHITE == "\x1b[37m"
    assert module_0.ForegroundColors.YELLOW == "\x1b[33m"
    assert (
        module_0.DebugMRIDCFormatter.DEFAULT_FORMAT
        == "%(color)s[MRIDC %(levelname)1.1s %(asctime)s %(module)s:%(lineno)d rank:%(rank)s]%(end_color)s %(message)s"
    )
    base_m_r_i_d_c_formatter_0 = module_0.BaseMRIDCFormatter(debug_m_r_i_d_c_formatter_1)
    assert base_m_r_i_d_c_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
    assert (
        module_0.BaseMRIDCFormatter.DEFAULT_FORMAT
        == "%(color)s[MRIDC %(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"
    )
    debug_m_r_i_d_c_formatter_2 = module_0.DebugMRIDCFormatter(str_0, base_m_r_i_d_c_formatter_0)
    assert debug_m_r_i_d_c_formatter_2.datefmt == "%Y-%m-%d %H:%M:%S"
    bytes_0 = b"ld\x98S\xef\x10w\xca\xbe\x89\xf9q!\xbb\xce\xac\xac\xb3\xd2P"
    dict_0 = {bytes_0: debug_m_r_i_d_c_formatter_2}
    tuple_0 = (dict_0,)
    tuple_1 = debug_m_r_i_d_c_formatter_2, bytes_0, tuple_0
    list_0 = [tuple_1, tuple_1]
    str_1 = ":[T:"
    set_0 = {str_0}
    base_formatter_0 = module_0.BaseFormatter(list_0, str_1, set_0)
    assert base_formatter_0.datefmt == {"913$Ogm#6+\r5kbw~Bw&"}
    assert (
        module_0.BaseFormatter.DEFAULT_FORMAT
        == "%(color)s[%(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"
    )
    assert module_0.BaseFormatter.DEFAULT_DATE_FORMAT == "%Y-%m-%d %H:%M:%S"
    assert module_0.BaseFormatter.DEFAULT_COLORS == {
        (10): "\x1b[36m",
        (20): "\x1b[32m",
        (30): "\x1b[33m",
        (40): "\x1b[35m",
        (50): "\x1b[31m",
    }


def test_case_1():
    debug_m_r_i_d_c_formatter_0 = module_0.DebugMRIDCFormatter()
    assert debug_m_r_i_d_c_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
    assert module_0.ForegroundColors.BLACK == "\x1b[30m"
    assert module_0.ForegroundColors.BLUE == "\x1b[34m"
    assert module_0.ForegroundColors.CYAN == "\x1b[36m"
    assert module_0.ForegroundColors.GREEN == "\x1b[32m"
    assert module_0.ForegroundColors.LIGHTBLACK_EX == "\x1b[90m"
    assert module_0.ForegroundColors.LIGHTBLUE_EX == "\x1b[94m"
    assert module_0.ForegroundColors.LIGHTCYAN_EX == "\x1b[96m"
    assert module_0.ForegroundColors.LIGHTGREEN_EX == "\x1b[92m"
    assert module_0.ForegroundColors.LIGHTMAGENTA_EX == "\x1b[95m"
    assert module_0.ForegroundColors.LIGHTRED_EX == "\x1b[91m"
    assert module_0.ForegroundColors.LIGHTWHITE_EX == "\x1b[97m"
    assert module_0.ForegroundColors.LIGHTYELLOW_EX == "\x1b[93m"
    assert module_0.ForegroundColors.MAGENTA == "\x1b[35m"
    assert module_0.ForegroundColors.RED == "\x1b[31m"
    assert module_0.ForegroundColors.RESET == "\x1b[39m"
    assert module_0.ForegroundColors.WHITE == "\x1b[37m"
    assert module_0.ForegroundColors.YELLOW == "\x1b[33m"
    assert (
        module_0.DebugMRIDCFormatter.DEFAULT_FORMAT
        == "%(color)s[MRIDC %(levelname)1.1s %(asctime)s %(module)s:%(lineno)d rank:%(rank)s]%(end_color)s %(message)s"
    )
    base_formatter_0 = module_0.BaseFormatter(debug_m_r_i_d_c_formatter_0)
    assert base_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
    assert (
        module_0.BaseFormatter.DEFAULT_FORMAT
        == "%(color)s[%(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"
    )
    assert module_0.BaseFormatter.DEFAULT_DATE_FORMAT == "%Y-%m-%d %H:%M:%S"
    assert module_0.BaseFormatter.DEFAULT_COLORS == {
        (10): "\x1b[36m",
        (20): "\x1b[32m",
        (30): "\x1b[33m",
        (40): "\x1b[35m",
        (50): "\x1b[31m",
    }
    dict_0 = {base_formatter_0: debug_m_r_i_d_c_formatter_0, debug_m_r_i_d_c_formatter_0: debug_m_r_i_d_c_formatter_0}
    debug_m_r_i_d_c_formatter_1 = module_0.DebugMRIDCFormatter()
    assert debug_m_r_i_d_c_formatter_1.datefmt == "%Y-%m-%d %H:%M:%S"
    base_m_r_i_d_c_formatter_0 = module_0.BaseMRIDCFormatter()
    assert base_m_r_i_d_c_formatter_0.datefmt == "%Y-%m-%d %H:%M:%S"
    assert (
        module_0.BaseMRIDCFormatter.DEFAULT_FORMAT
        == "%(color)s[MRIDC %(levelname)1.1s %(asctime)s %(module)s:%(lineno)d]%(end_color)s %(message)s"
    )
    str_0 = ' @zv"h[F}n'
    debug_m_r_i_d_c_formatter_2 = module_0.DebugMRIDCFormatter(base_formatter_0, str_0)
    assert debug_m_r_i_d_c_formatter_2.datefmt == "%Y-%m-%d %H:%M:%S"
    float_0 = 1.5
    debug_m_r_i_d_c_formatter_3 = module_0.DebugMRIDCFormatter(float_0, dict_0)
    assert debug_m_r_i_d_c_formatter_3.datefmt == "%Y-%m-%d %H:%M:%S"
    base_m_r_i_d_c_formatter_1 = module_0.BaseMRIDCFormatter()
    assert base_m_r_i_d_c_formatter_1.datefmt == "%Y-%m-%d %H:%M:%S"
    debug_m_r_i_d_c_formatter_4 = module_0.DebugMRIDCFormatter(base_formatter_0, dict_0)
    assert debug_m_r_i_d_c_formatter_4.datefmt == "%Y-%m-%d %H:%M:%S"
