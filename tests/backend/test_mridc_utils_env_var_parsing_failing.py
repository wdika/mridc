# coding=utf-8
# Automatically generated by Pynguin.
import mridc.utils.env_var_parsing as module_0


def test_case_0():
    try:
        tuple_0 = ()
        var_0 = module_0.get_envdict(tuple_0)
    except BaseException:
        pass


def test_case_1():
    try:
        str_0 = """
        A default implementation of a collation function.
        Users should override this method to define custom data loaders.
        """
        int_0 = -566
        required_setting_missing_error_0 = module_0.RequiredSettingMissingError(int_0)
        assert required_setting_missing_error_0 is not None
        str_1 = "ERROR"
        list_0 = [str_1]
        var_0 = module_0.get_env(str_0, *list_0)
        assert var_0 == "ERROR"
        tuple_0 = None
        var_1 = module_0.get_envbool(tuple_0)
    except BaseException:
        pass


def test_case_2():
    try:
        str_0 = "Adafactor"
        required_setting_missing_error_0 = module_0.RequiredSettingMissingError(str_0)
        assert required_setting_missing_error_0 is not None
        str_1 = "U5N~Ux!|u~!6so?"
        var_0 = module_0.get_envfloat(str_1)
    except BaseException:
        pass


def test_case_3():
    try:
        str_0 = "of incompatible neural types:\n\n{} \n\n and \n\n{}"
        var_0 = module_0.get_envdatetime(str_0)
    except BaseException:
        pass


def test_case_4():
    try:
        int_0 = None
        set_0 = {int_0}
        var_0 = module_0.get_envfloat(set_0)
    except BaseException:
        pass


def test_case_5():
    try:
        str_0 = None
        list_0 = [str_0, str_0, str_0]
        str_1 = "7c3*}55"
        dict_0 = {str_0: list_0, str_0: str_0, str_1: list_0}
        var_0 = module_0.get_env(str_0, *list_0, **dict_0)
    except BaseException:
        pass


def test_case_6():
    try:
        str_0 = "\x0c5![<iI9"
        var_0 = module_0.get_envdate(str_0)
    except BaseException:
        pass


def test_case_7():
    try:
        int_0 = 1582
        set_0 = {int_0}
        required_setting_missing_error_0 = module_0.RequiredSettingMissingError(set_0)
        assert required_setting_missing_error_0 is not None
        float_0 = -16.23486
        var_0 = module_0.get_envlist(float_0)
    except BaseException:
        pass


def test_case_8():
    try:
        int_0 = None
        set_0 = {int_0}
        required_setting_missing_error_0 = module_0.RequiredSettingMissingError(set_0)
        assert required_setting_missing_error_0 is not None
        str_0 = "\t.Fc[LV.T"
        var_0 = module_0.get_envdecimal(str_0)
    except BaseException:
        pass


def test_case_9():
    try:
        dict_0 = None
        str_0 = "#@G."
        bytes_0 = b"H\xac\xc2G\x84"
        coercion_error_0 = module_0.CoercionError(dict_0, str_0, bytes_0)
    except BaseException:
        pass


def test_case_10():
    try:
        bool_0 = None
        required_setting_missing_error_0 = module_0.RequiredSettingMissingError(bool_0)
        assert required_setting_missing_error_0 is not None
        bytes_0 = None
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        list_1 = [bytes_0, bytes_0, list_0]
        var_0 = module_0.get_envfloat(list_0, *list_1)
    except BaseException:
        pass


def test_case_11():
    try:
        dict_0 = None
        dict_1 = {dict_0: dict_0}
        list_0 = [dict_1]
        var_0 = module_0.get_envint(dict_0, *list_0)
    except BaseException:
        pass
