# coding=utf-8
# Automatically generated by Pynguin.
import mridc.collections.common.losses.aggregator as module_0


def test_case_0():
    try:
        aggregator_loss_0 = module_0.AggregatorLoss()
        assert aggregator_loss_0.training is True
        assert aggregator_loss_0.reduction == "mean"
        var_0 = aggregator_loss_0.forward()
    except BaseException:
        pass


def test_case_1():
    try:
        int_0 = -1547
        aggregator_loss_0 = module_0.AggregatorLoss(int_0)
        assert aggregator_loss_0.training is True
        assert aggregator_loss_0.reduction == "mean"
        aggregator_loss_1 = module_0.AggregatorLoss()
        assert aggregator_loss_1.training is True
        assert aggregator_loss_1.reduction == "mean"
        var_0 = aggregator_loss_1.forward()
    except BaseException:
        pass


def test_case_2():
    try:
        aggregator_loss_0 = module_0.AggregatorLoss()
        assert aggregator_loss_0.training is True
        assert aggregator_loss_0.reduction == "mean"
        var_0 = aggregator_loss_0.forward()
    except BaseException:
        pass


def test_case_3():
    try:
        aggregator_loss_0 = module_0.AggregatorLoss()
        assert aggregator_loss_0.training is True
        assert aggregator_loss_0.reduction == "mean"
        var_0 = aggregator_loss_0.forward()
    except BaseException:
        pass


def test_case_4():
    try:
        int_0 = -5
        float_0 = 0.9
        float_1 = -3904.02
        list_0 = [float_0, float_0, float_1, float_1]
        aggregator_loss_0 = module_0.AggregatorLoss(int_0, list_0)
    except BaseException:
        pass


def test_case_5():
    try:
        int_0 = 45
        int_1 = 1556
        aggregator_loss_0 = module_0.AggregatorLoss(int_1)
        assert aggregator_loss_0.training is True
        assert aggregator_loss_0.reduction == "mean"
        float_0 = -1503.4551
        float_1 = -2783.0512
        float_2 = -2010.0
        list_0 = [float_0, float_1, float_2]
        aggregator_loss_1 = module_0.AggregatorLoss(int_0, list_0)
    except BaseException:
        pass


def test_case_6():
    try:
        aggregator_loss_0 = module_0.AggregatorLoss()
        assert aggregator_loss_0.training is True
        assert aggregator_loss_0.reduction == "mean"
        var_0 = aggregator_loss_0.forward()
    except BaseException:
        pass


def test_case_7():
    try:
        int_0 = 22
        aggregator_loss_0 = module_0.AggregatorLoss(int_0)
        assert aggregator_loss_0.training is True
        assert aggregator_loss_0.reduction == "mean"
        int_1 = -718
        aggregator_loss_1 = module_0.AggregatorLoss(int_1)
        assert aggregator_loss_1.training is True
        assert aggregator_loss_1.reduction == "mean"
        var_0 = aggregator_loss_1.forward()
    except BaseException:
        pass


def test_case_9():
    try:
        aggregator_loss_0 = module_0.AggregatorLoss()
        assert aggregator_loss_0.training is True
        assert aggregator_loss_0.reduction == "mean"
        var_0 = aggregator_loss_0.forward()
    except BaseException:
        pass
