# coding=utf-8
# Automatically generated by Pynguin.
import mridc.utils.formaters.colors as module_0


def test_case_0():
    ansi_back_0 = module_0.AnsiBack()
    assert ansi_back_0.BLACK == "\x1b[40m"
    assert ansi_back_0.BLUE == "\x1b[44m"
    assert ansi_back_0.CYAN == "\x1b[46m"
    assert ansi_back_0.GREEN == "\x1b[42m"
    assert ansi_back_0.LIGHTBLACK_EX == "\x1b[100m"
    assert ansi_back_0.LIGHTBLUE_EX == "\x1b[104m"
    assert ansi_back_0.LIGHTCYAN_EX == "\x1b[106m"
    assert ansi_back_0.LIGHTGREEN_EX == "\x1b[102m"
    assert ansi_back_0.LIGHTMAGENTA_EX == "\x1b[105m"
    assert ansi_back_0.LIGHTRED_EX == "\x1b[101m"
    assert ansi_back_0.LIGHTWHITE_EX == "\x1b[107m"
    assert ansi_back_0.LIGHTYELLOW_EX == "\x1b[103m"
    assert ansi_back_0.MAGENTA == "\x1b[45m"
    assert ansi_back_0.RED == "\x1b[41m"
    assert ansi_back_0.RESET == "\x1b[49m"
    assert ansi_back_0.WHITE == "\x1b[47m"
    assert ansi_back_0.YELLOW == "\x1b[43m"
    assert module_0.CSI == "\x1b["
    assert module_0.OSC == "\x1b]"
    assert module_0.BEL == "\x07"
    assert module_0.Fore.BLACK == "\x1b[30m"
    assert module_0.Fore.BLUE == "\x1b[34m"
    assert module_0.Fore.CYAN == "\x1b[36m"
    assert module_0.Fore.GREEN == "\x1b[32m"
    assert module_0.Fore.LIGHTBLACK_EX == "\x1b[90m"
    assert module_0.Fore.LIGHTBLUE_EX == "\x1b[94m"
    assert module_0.Fore.LIGHTCYAN_EX == "\x1b[96m"
    assert module_0.Fore.LIGHTGREEN_EX == "\x1b[92m"
    assert module_0.Fore.LIGHTMAGENTA_EX == "\x1b[95m"
    assert module_0.Fore.LIGHTRED_EX == "\x1b[91m"
    assert module_0.Fore.LIGHTWHITE_EX == "\x1b[97m"
    assert module_0.Fore.LIGHTYELLOW_EX == "\x1b[93m"
    assert module_0.Fore.MAGENTA == "\x1b[35m"
    assert module_0.Fore.RED == "\x1b[31m"
    assert module_0.Fore.RESET == "\x1b[39m"
    assert module_0.Fore.WHITE == "\x1b[37m"
    assert module_0.Fore.YELLOW == "\x1b[33m"
    assert module_0.Back.BLACK == "\x1b[40m"
    assert module_0.Back.BLUE == "\x1b[44m"
    assert module_0.Back.CYAN == "\x1b[46m"
    assert module_0.Back.GREEN == "\x1b[42m"
    assert module_0.Back.LIGHTBLACK_EX == "\x1b[100m"
    assert module_0.Back.LIGHTBLUE_EX == "\x1b[104m"
    assert module_0.Back.LIGHTCYAN_EX == "\x1b[106m"
    assert module_0.Back.LIGHTGREEN_EX == "\x1b[102m"
    assert module_0.Back.LIGHTMAGENTA_EX == "\x1b[105m"
    assert module_0.Back.LIGHTRED_EX == "\x1b[101m"
    assert module_0.Back.LIGHTWHITE_EX == "\x1b[107m"
    assert module_0.Back.LIGHTYELLOW_EX == "\x1b[103m"
    assert module_0.Back.MAGENTA == "\x1b[45m"
    assert module_0.Back.RED == "\x1b[41m"
    assert module_0.Back.RESET == "\x1b[49m"
    assert module_0.Back.WHITE == "\x1b[47m"
    assert module_0.Back.YELLOW == "\x1b[43m"
    assert module_0.Style.BRIGHT == "\x1b[1m"
    assert module_0.Style.DIM == "\x1b[2m"
    assert module_0.Style.NORMAL == "\x1b[22m"
    assert module_0.Style.RESET_ALL == "\x1b[0m"
    assert module_0.AnsiBack.BLACK == 40
    assert module_0.AnsiBack.RED == 41
    assert module_0.AnsiBack.GREEN == 42
    assert module_0.AnsiBack.YELLOW == 43
    assert module_0.AnsiBack.BLUE == 44
    assert module_0.AnsiBack.MAGENTA == 45
    assert module_0.AnsiBack.CYAN == 46
    assert module_0.AnsiBack.WHITE == 47
    assert module_0.AnsiBack.RESET == 49
    assert module_0.AnsiBack.LIGHTBLACK_EX == 100
    assert module_0.AnsiBack.LIGHTRED_EX == 101
    assert module_0.AnsiBack.LIGHTGREEN_EX == 102
    assert module_0.AnsiBack.LIGHTYELLOW_EX == 103
    assert module_0.AnsiBack.LIGHTBLUE_EX == 104
    assert module_0.AnsiBack.LIGHTMAGENTA_EX == 105
    assert module_0.AnsiBack.LIGHTCYAN_EX == 106
    assert module_0.AnsiBack.LIGHTWHITE_EX == 107
    list_0 = [ansi_back_0, ansi_back_0, ansi_back_0]
    str_0 = "(6D-m"
    tuple_0 = list_0, str_0
    ansi_cursor_0 = module_0.AnsiCursor()
    assert module_0.AnsiCursor.UP is not None
    assert module_0.AnsiCursor.DOWN is not None
    assert module_0.AnsiCursor.FORWARD is not None
    assert module_0.AnsiCursor.BACK is not None
    assert module_0.AnsiCursor.POS is not None
    var_0 = ansi_cursor_0.POS(tuple_0)
    assert ansi_cursor_0 is not None
    assert module_0.Cursor is not None
    ansi_cursor_1 = module_0.AnsiCursor()
    assert ansi_cursor_1 is not None
    ansi_fore_0 = module_0.AnsiFore()
    assert ansi_fore_0.BLACK == "\x1b[30m"
    assert ansi_fore_0.BLUE == "\x1b[34m"
    assert ansi_fore_0.CYAN == "\x1b[36m"
    assert ansi_fore_0.GREEN == "\x1b[32m"
    assert ansi_fore_0.LIGHTBLACK_EX == "\x1b[90m"
    assert ansi_fore_0.LIGHTBLUE_EX == "\x1b[94m"
    assert ansi_fore_0.LIGHTCYAN_EX == "\x1b[96m"
    assert ansi_fore_0.LIGHTGREEN_EX == "\x1b[92m"
    assert ansi_fore_0.LIGHTMAGENTA_EX == "\x1b[95m"
    assert ansi_fore_0.LIGHTRED_EX == "\x1b[91m"
    assert ansi_fore_0.LIGHTWHITE_EX == "\x1b[97m"
    assert ansi_fore_0.LIGHTYELLOW_EX == "\x1b[93m"
    assert ansi_fore_0.MAGENTA == "\x1b[35m"
    assert ansi_fore_0.RED == "\x1b[31m"
    assert ansi_fore_0.RESET == "\x1b[39m"
    assert ansi_fore_0.WHITE == "\x1b[37m"
    assert ansi_fore_0.YELLOW == "\x1b[33m"
    assert module_0.AnsiFore.BLACK == 30
    assert module_0.AnsiFore.RED == 31
    assert module_0.AnsiFore.GREEN == 32
    assert module_0.AnsiFore.YELLOW == 33
    assert module_0.AnsiFore.BLUE == 34
    assert module_0.AnsiFore.MAGENTA == 35
    assert module_0.AnsiFore.CYAN == 36
    assert module_0.AnsiFore.WHITE == 37
    assert module_0.AnsiFore.RESET == 39
    assert module_0.AnsiFore.LIGHTBLACK_EX == 90
    assert module_0.AnsiFore.LIGHTRED_EX == 91
    assert module_0.AnsiFore.LIGHTGREEN_EX == 92
    assert module_0.AnsiFore.LIGHTYELLOW_EX == 93
    assert module_0.AnsiFore.LIGHTBLUE_EX == 94
    assert module_0.AnsiFore.LIGHTMAGENTA_EX == 95
    assert module_0.AnsiFore.LIGHTCYAN_EX == 96
    assert module_0.AnsiFore.LIGHTWHITE_EX == 97
    ansi_codes_0 = module_0.AnsiCodes()
    assert ansi_codes_0 is not None
    ansi_back_1 = module_0.AnsiBack()
    assert ansi_back_1.BLACK == "\x1b[40m"
    assert ansi_back_1.BLUE == "\x1b[44m"
    assert ansi_back_1.CYAN == "\x1b[46m"
    assert ansi_back_1.GREEN == "\x1b[42m"
    assert ansi_back_1.LIGHTBLACK_EX == "\x1b[100m"
    assert ansi_back_1.LIGHTBLUE_EX == "\x1b[104m"
    assert ansi_back_1.LIGHTCYAN_EX == "\x1b[106m"
    assert ansi_back_1.LIGHTGREEN_EX == "\x1b[102m"
    assert ansi_back_1.LIGHTMAGENTA_EX == "\x1b[105m"
    assert ansi_back_1.LIGHTRED_EX == "\x1b[101m"
    assert ansi_back_1.LIGHTWHITE_EX == "\x1b[107m"
    assert ansi_back_1.LIGHTYELLOW_EX == "\x1b[103m"
    assert ansi_back_1.MAGENTA == "\x1b[45m"
    assert ansi_back_1.RED == "\x1b[41m"
    assert ansi_back_1.RESET == "\x1b[49m"
    assert ansi_back_1.WHITE == "\x1b[47m"
    assert ansi_back_1.YELLOW == "\x1b[43m"
    ansi_back_2 = module_0.AnsiBack()
    assert ansi_back_2.BLACK == "\x1b[40m"
    assert ansi_back_2.BLUE == "\x1b[44m"
    assert ansi_back_2.CYAN == "\x1b[46m"
    assert ansi_back_2.GREEN == "\x1b[42m"
    assert ansi_back_2.LIGHTBLACK_EX == "\x1b[100m"
    assert ansi_back_2.LIGHTBLUE_EX == "\x1b[104m"
    assert ansi_back_2.LIGHTCYAN_EX == "\x1b[106m"
    assert ansi_back_2.LIGHTGREEN_EX == "\x1b[102m"
    assert ansi_back_2.LIGHTMAGENTA_EX == "\x1b[105m"
    assert ansi_back_2.LIGHTRED_EX == "\x1b[101m"
    assert ansi_back_2.LIGHTWHITE_EX == "\x1b[107m"
    assert ansi_back_2.LIGHTYELLOW_EX == "\x1b[103m"
    assert ansi_back_2.MAGENTA == "\x1b[45m"
    assert ansi_back_2.RED == "\x1b[41m"
    assert ansi_back_2.RESET == "\x1b[49m"
    assert ansi_back_2.WHITE == "\x1b[47m"
    assert ansi_back_2.YELLOW == "\x1b[43m"


def test_case_1():
    ansi_codes_0 = module_0.AnsiCodes()
    assert module_0.CSI == "\x1b["
    assert module_0.OSC == "\x1b]"
    assert module_0.BEL == "\x07"
    assert module_0.Fore.BLACK == "\x1b[30m"
    assert module_0.Fore.BLUE == "\x1b[34m"
    assert module_0.Fore.CYAN == "\x1b[36m"
    assert module_0.Fore.GREEN == "\x1b[32m"
    assert module_0.Fore.LIGHTBLACK_EX == "\x1b[90m"
    assert module_0.Fore.LIGHTBLUE_EX == "\x1b[94m"
    assert module_0.Fore.LIGHTCYAN_EX == "\x1b[96m"
    assert module_0.Fore.LIGHTGREEN_EX == "\x1b[92m"
    assert module_0.Fore.LIGHTMAGENTA_EX == "\x1b[95m"
    assert module_0.Fore.LIGHTRED_EX == "\x1b[91m"
    assert module_0.Fore.LIGHTWHITE_EX == "\x1b[97m"
    assert module_0.Fore.LIGHTYELLOW_EX == "\x1b[93m"
    assert module_0.Fore.MAGENTA == "\x1b[35m"
    assert module_0.Fore.RED == "\x1b[31m"
    assert module_0.Fore.RESET == "\x1b[39m"
    assert module_0.Fore.WHITE == "\x1b[37m"
    assert module_0.Fore.YELLOW == "\x1b[33m"
    assert module_0.Back.BLACK == "\x1b[40m"
    assert module_0.Back.BLUE == "\x1b[44m"
    assert module_0.Back.CYAN == "\x1b[46m"
    assert module_0.Back.GREEN == "\x1b[42m"
    assert module_0.Back.LIGHTBLACK_EX == "\x1b[100m"
    assert module_0.Back.LIGHTBLUE_EX == "\x1b[104m"
    assert module_0.Back.LIGHTCYAN_EX == "\x1b[106m"
    assert module_0.Back.LIGHTGREEN_EX == "\x1b[102m"
    assert module_0.Back.LIGHTMAGENTA_EX == "\x1b[105m"
    assert module_0.Back.LIGHTRED_EX == "\x1b[101m"
    assert module_0.Back.LIGHTWHITE_EX == "\x1b[107m"
    assert module_0.Back.LIGHTYELLOW_EX == "\x1b[103m"
    assert module_0.Back.MAGENTA == "\x1b[45m"
    assert module_0.Back.RED == "\x1b[41m"
    assert module_0.Back.RESET == "\x1b[49m"
    assert module_0.Back.WHITE == "\x1b[47m"
    assert module_0.Back.YELLOW == "\x1b[43m"
    assert module_0.Style.BRIGHT == "\x1b[1m"
    assert module_0.Style.DIM == "\x1b[2m"
    assert module_0.Style.NORMAL == "\x1b[22m"
    assert module_0.Style.RESET_ALL == "\x1b[0m"
    bool_0 = False
    ansi_cursor_0 = module_0.AnsiCursor()
    assert module_0.AnsiCursor.UP is not None
    assert module_0.AnsiCursor.DOWN is not None
    assert module_0.AnsiCursor.FORWARD is not None
    assert module_0.AnsiCursor.BACK is not None
    assert module_0.AnsiCursor.POS is not None
    var_0 = module_0.clear_line()
    assert var_0 == "\x1b[2K"
    assert ansi_codes_0 is not None
    assert ansi_cursor_0 is not None
    assert module_0.Cursor is not None
    var_1 = ansi_cursor_0.UP(bool_0)
    assert var_1 == "\x1b[FalseA"
    ansi_back_0 = module_0.AnsiBack()
    assert ansi_back_0.BLACK == "\x1b[40m"
    assert ansi_back_0.BLUE == "\x1b[44m"
    assert ansi_back_0.CYAN == "\x1b[46m"
    assert ansi_back_0.GREEN == "\x1b[42m"
    assert ansi_back_0.LIGHTBLACK_EX == "\x1b[100m"
    assert ansi_back_0.LIGHTBLUE_EX == "\x1b[104m"
    assert ansi_back_0.LIGHTCYAN_EX == "\x1b[106m"
    assert ansi_back_0.LIGHTGREEN_EX == "\x1b[102m"
    assert ansi_back_0.LIGHTMAGENTA_EX == "\x1b[105m"
    assert ansi_back_0.LIGHTRED_EX == "\x1b[101m"
    assert ansi_back_0.LIGHTWHITE_EX == "\x1b[107m"
    assert ansi_back_0.LIGHTYELLOW_EX == "\x1b[103m"
    assert ansi_back_0.MAGENTA == "\x1b[45m"
    assert ansi_back_0.RED == "\x1b[41m"
    assert ansi_back_0.RESET == "\x1b[49m"
    assert ansi_back_0.WHITE == "\x1b[47m"
    assert ansi_back_0.YELLOW == "\x1b[43m"
    assert module_0.AnsiBack.BLACK == 40
    assert module_0.AnsiBack.RED == 41
    assert module_0.AnsiBack.GREEN == 42
    assert module_0.AnsiBack.YELLOW == 43
    assert module_0.AnsiBack.BLUE == 44
    assert module_0.AnsiBack.MAGENTA == 45
    assert module_0.AnsiBack.CYAN == 46
    assert module_0.AnsiBack.WHITE == 47
    assert module_0.AnsiBack.RESET == 49
    assert module_0.AnsiBack.LIGHTBLACK_EX == 100
    assert module_0.AnsiBack.LIGHTRED_EX == 101
    assert module_0.AnsiBack.LIGHTGREEN_EX == 102
    assert module_0.AnsiBack.LIGHTYELLOW_EX == 103
    assert module_0.AnsiBack.LIGHTBLUE_EX == 104
    assert module_0.AnsiBack.LIGHTMAGENTA_EX == 105
    assert module_0.AnsiBack.LIGHTCYAN_EX == 106
    assert module_0.AnsiBack.LIGHTWHITE_EX == 107
    var_2 = module_0.set_title(ansi_codes_0)
    ansi_style_0 = module_0.AnsiStyle()
    assert ansi_style_0.BRIGHT == "\x1b[1m"
    assert ansi_style_0.DIM == "\x1b[2m"
    assert ansi_style_0.NORMAL == "\x1b[22m"
    assert ansi_style_0.RESET_ALL == "\x1b[0m"
    assert module_0.AnsiStyle.BRIGHT == 1
    assert module_0.AnsiStyle.DIM == 2
    assert module_0.AnsiStyle.NORMAL == 22
    assert module_0.AnsiStyle.RESET_ALL == 0
    ansi_fore_0 = module_0.AnsiFore()
    assert ansi_fore_0.BLACK == "\x1b[30m"
    assert ansi_fore_0.BLUE == "\x1b[34m"
    assert ansi_fore_0.CYAN == "\x1b[36m"
    assert ansi_fore_0.GREEN == "\x1b[32m"
    assert ansi_fore_0.LIGHTBLACK_EX == "\x1b[90m"
    assert ansi_fore_0.LIGHTBLUE_EX == "\x1b[94m"
    assert ansi_fore_0.LIGHTCYAN_EX == "\x1b[96m"
    assert ansi_fore_0.LIGHTGREEN_EX == "\x1b[92m"
    assert ansi_fore_0.LIGHTMAGENTA_EX == "\x1b[95m"
    assert ansi_fore_0.LIGHTRED_EX == "\x1b[91m"
    assert ansi_fore_0.LIGHTWHITE_EX == "\x1b[97m"
    assert ansi_fore_0.LIGHTYELLOW_EX == "\x1b[93m"
    assert ansi_fore_0.MAGENTA == "\x1b[35m"
    assert ansi_fore_0.RED == "\x1b[31m"
    assert ansi_fore_0.RESET == "\x1b[39m"
    assert ansi_fore_0.WHITE == "\x1b[37m"
    assert ansi_fore_0.YELLOW == "\x1b[33m"
    assert module_0.AnsiFore.BLACK == 30
    assert module_0.AnsiFore.RED == 31
    assert module_0.AnsiFore.GREEN == 32
    assert module_0.AnsiFore.YELLOW == 33
    assert module_0.AnsiFore.BLUE == 34
    assert module_0.AnsiFore.MAGENTA == 35
    assert module_0.AnsiFore.CYAN == 36
    assert module_0.AnsiFore.WHITE == 37
    assert module_0.AnsiFore.RESET == 39
    assert module_0.AnsiFore.LIGHTBLACK_EX == 90
    assert module_0.AnsiFore.LIGHTRED_EX == 91
    assert module_0.AnsiFore.LIGHTGREEN_EX == 92
    assert module_0.AnsiFore.LIGHTYELLOW_EX == 93
    assert module_0.AnsiFore.LIGHTBLUE_EX == 94
    assert module_0.AnsiFore.LIGHTMAGENTA_EX == 95
    assert module_0.AnsiFore.LIGHTCYAN_EX == 96
    assert module_0.AnsiFore.LIGHTWHITE_EX == 97
    ansi_cursor_1 = module_0.AnsiCursor()
    assert ansi_cursor_1 is not None
    var_3 = ansi_cursor_1.UP()
    assert var_3 == "\x1b[1A"
    int_0 = -494
    var_4 = ansi_cursor_0.DOWN()
    assert var_4 == "\x1b[1B"
    ansi_style_1 = module_0.AnsiStyle()
    assert ansi_style_1.BRIGHT == "\x1b[1m"
    assert ansi_style_1.DIM == "\x1b[2m"
    assert ansi_style_1.NORMAL == "\x1b[22m"
    assert ansi_style_1.RESET_ALL == "\x1b[0m"
    var_5 = module_0.set_title(int_0)
    assert var_5 == "\x1b]2;-494\x07"
    var_6 = ansi_cursor_1.BACK()
    assert var_6 == "\x1b[1D"
    ansi_codes_1 = module_0.AnsiCodes()
    assert ansi_codes_1 is not None
    var_7 = module_0.code_to_chars(ansi_codes_1)
    var_8 = ansi_cursor_1.BACK()
    assert var_8 == "\x1b[1D"


def test_case_2():
    bool_0 = False
    var_0 = module_0.code_to_chars(bool_0)
    assert var_0 == "\x1b[Falsem"
    assert module_0.CSI == "\x1b["
    assert module_0.OSC == "\x1b]"
    assert module_0.BEL == "\x07"
    assert module_0.Fore.BLACK == "\x1b[30m"
    assert module_0.Fore.BLUE == "\x1b[34m"
    assert module_0.Fore.CYAN == "\x1b[36m"
    assert module_0.Fore.GREEN == "\x1b[32m"
    assert module_0.Fore.LIGHTBLACK_EX == "\x1b[90m"
    assert module_0.Fore.LIGHTBLUE_EX == "\x1b[94m"
    assert module_0.Fore.LIGHTCYAN_EX == "\x1b[96m"
    assert module_0.Fore.LIGHTGREEN_EX == "\x1b[92m"
    assert module_0.Fore.LIGHTMAGENTA_EX == "\x1b[95m"
    assert module_0.Fore.LIGHTRED_EX == "\x1b[91m"
    assert module_0.Fore.LIGHTWHITE_EX == "\x1b[97m"
    assert module_0.Fore.LIGHTYELLOW_EX == "\x1b[93m"
    assert module_0.Fore.MAGENTA == "\x1b[35m"
    assert module_0.Fore.RED == "\x1b[31m"
    assert module_0.Fore.RESET == "\x1b[39m"
    assert module_0.Fore.WHITE == "\x1b[37m"
    assert module_0.Fore.YELLOW == "\x1b[33m"
    assert module_0.Back.BLACK == "\x1b[40m"
    assert module_0.Back.BLUE == "\x1b[44m"
    assert module_0.Back.CYAN == "\x1b[46m"
    assert module_0.Back.GREEN == "\x1b[42m"
    assert module_0.Back.LIGHTBLACK_EX == "\x1b[100m"
    assert module_0.Back.LIGHTBLUE_EX == "\x1b[104m"
    assert module_0.Back.LIGHTCYAN_EX == "\x1b[106m"
    assert module_0.Back.LIGHTGREEN_EX == "\x1b[102m"
    assert module_0.Back.LIGHTMAGENTA_EX == "\x1b[105m"
    assert module_0.Back.LIGHTRED_EX == "\x1b[101m"
    assert module_0.Back.LIGHTWHITE_EX == "\x1b[107m"
    assert module_0.Back.LIGHTYELLOW_EX == "\x1b[103m"
    assert module_0.Back.MAGENTA == "\x1b[45m"
    assert module_0.Back.RED == "\x1b[41m"
    assert module_0.Back.RESET == "\x1b[49m"
    assert module_0.Back.WHITE == "\x1b[47m"
    assert module_0.Back.YELLOW == "\x1b[43m"
    assert module_0.Style.BRIGHT == "\x1b[1m"
    assert module_0.Style.DIM == "\x1b[2m"
    assert module_0.Style.NORMAL == "\x1b[22m"
    assert module_0.Style.RESET_ALL == "\x1b[0m"
    ansi_cursor_0 = module_0.AnsiCursor()
    assert module_0.AnsiCursor.UP is not None
    assert module_0.AnsiCursor.DOWN is not None
    assert module_0.AnsiCursor.FORWARD is not None
    assert module_0.AnsiCursor.BACK is not None
    assert module_0.AnsiCursor.POS is not None
    var_1 = module_0.clear_screen()
    assert var_1 == "\x1b[2J"
    assert ansi_cursor_0 is not None
    assert module_0.Cursor is not None
    var_2 = module_0.clear_screen()
    assert var_2 == "\x1b[2J"
    ansi_fore_0 = module_0.AnsiFore()
    assert ansi_fore_0.BLACK == "\x1b[30m"
    assert ansi_fore_0.BLUE == "\x1b[34m"
    assert ansi_fore_0.CYAN == "\x1b[36m"
    assert ansi_fore_0.GREEN == "\x1b[32m"
    assert ansi_fore_0.LIGHTBLACK_EX == "\x1b[90m"
    assert ansi_fore_0.LIGHTBLUE_EX == "\x1b[94m"
    assert ansi_fore_0.LIGHTCYAN_EX == "\x1b[96m"
    assert ansi_fore_0.LIGHTGREEN_EX == "\x1b[92m"
    assert ansi_fore_0.LIGHTMAGENTA_EX == "\x1b[95m"
    assert ansi_fore_0.LIGHTRED_EX == "\x1b[91m"
    assert ansi_fore_0.LIGHTWHITE_EX == "\x1b[97m"
    assert ansi_fore_0.LIGHTYELLOW_EX == "\x1b[93m"
    assert ansi_fore_0.MAGENTA == "\x1b[35m"
    assert ansi_fore_0.RED == "\x1b[31m"
    assert ansi_fore_0.RESET == "\x1b[39m"
    assert ansi_fore_0.WHITE == "\x1b[37m"
    assert ansi_fore_0.YELLOW == "\x1b[33m"
    assert module_0.AnsiFore.BLACK == 30
    assert module_0.AnsiFore.RED == 31
    assert module_0.AnsiFore.GREEN == 32
    assert module_0.AnsiFore.YELLOW == 33
    assert module_0.AnsiFore.BLUE == 34
    assert module_0.AnsiFore.MAGENTA == 35
    assert module_0.AnsiFore.CYAN == 36
    assert module_0.AnsiFore.WHITE == 37
    assert module_0.AnsiFore.RESET == 39
    assert module_0.AnsiFore.LIGHTBLACK_EX == 90
    assert module_0.AnsiFore.LIGHTRED_EX == 91
    assert module_0.AnsiFore.LIGHTGREEN_EX == 92
    assert module_0.AnsiFore.LIGHTYELLOW_EX == 93
    assert module_0.AnsiFore.LIGHTBLUE_EX == 94
    assert module_0.AnsiFore.LIGHTMAGENTA_EX == 95
    assert module_0.AnsiFore.LIGHTCYAN_EX == 96
    assert module_0.AnsiFore.LIGHTWHITE_EX == 97
    dict_0 = {var_2: var_1, ansi_cursor_0: var_1, bool_0: ansi_cursor_0}
    str_0 = "X=h9C)P3a"
    complex_0 = None
    tuple_0 = dict_0, str_0, complex_0, ansi_fore_0
    var_3 = ansi_cursor_0.UP(tuple_0)
