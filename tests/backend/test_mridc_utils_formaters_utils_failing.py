# coding=utf-8
# Automatically generated by Pynguin.
import mridc.utils.formaters.utils as module_0


def test_case_0():
    try:
        var_0 = module_0.check_color_support()
        assert var_0 is False
        list_0 = []
        str_0 = ""
        int_0 = 7
        tuple_0 = list_0, str_0, int_0
        var_1 = module_0.to_unicode(tuple_0)
    except BaseException:
        pass


def test_case_1():
    try:
        var_0 = module_0.check_color_support()
        assert var_0 is False
        bytes_0 = b"\x8f\xee@\x04V\xe3\xe7\x9e<p\x009l%\xe0\x87\x8a"
        set_0 = {bytes_0, bytes_0}
        var_1 = module_0.to_unicode(set_0)
    except BaseException:
        pass


def test_case_2():
    try:
        var_0 = module_0.check_color_support()
        assert var_0 is False
        str_0 = "\r<%w-m1j+"
        list_0 = [str_0, var_0, var_0, str_0]
        var_1 = module_0.to_unicode(list_0)
    except BaseException:
        pass


def test_case_3():
    try:
        var_0 = module_0.check_color_support()
        assert var_0 is False
        var_1 = module_0.check_color_support()
        assert var_1 is False
        var_2 = module_0.check_color_support()
        assert var_2 is False
        str_0 = "4|JU&XIg&/c"
        var_3 = module_0.check_color_support()
        assert var_3 is False
        var_4 = module_0.to_unicode(str_0)
        assert var_4 == "4|JU&XIg&/c"
        assert module_0.MRIDC_ENV_VARNAME_ENABLE_COLORING == "MRIDC_ENABLE_COLORING"
        var_5 = module_0.check_color_support()
        assert var_5 is False
        str_1 = "G@;j"
        var_6 = module_0.to_unicode(str_1)
        assert var_6 == "G@;j"
        var_7 = module_0.check_color_support()
        assert var_7 is False
        var_8 = module_0.check_color_support()
        assert var_8 is False
        var_9 = module_0.check_color_support()
        assert var_9 is False
        str_2 = "ChaPjE3:hLjG%s])Z"
        bytes_0 = b"\xee"
        var_10 = module_0.check_color_support()
        assert var_10 is False
        var_11 = module_0.to_unicode(bytes_0)
        assert var_11 == "b'\\xee'"
        var_12 = module_0.to_unicode(str_2)
        assert var_12 == "ChaPjE3:hLjG%s])Z"
        float_0 = 1e-08
        var_13 = module_0.check_color_support()
        assert var_13 is False
        var_14 = module_0.to_unicode(float_0)
    except BaseException:
        pass


def test_case_4():
    try:
        var_0 = module_0.check_color_support()
        assert var_0 is False
        float_0 = -4682.8
        var_1 = module_0.to_unicode(float_0)
    except BaseException:
        pass


def test_case_6():
    try:
        tuple_0 = ()
        var_0 = module_0.to_unicode(tuple_0)
    except BaseException:
        pass


def test_case_7():
    try:
        var_0 = module_0.check_color_support()
        assert var_0 is False
        var_1 = module_0.check_color_support()
        assert var_1 is False
        int_0 = -3258
        var_2 = module_0.to_unicode(int_0)
    except BaseException:
        pass
