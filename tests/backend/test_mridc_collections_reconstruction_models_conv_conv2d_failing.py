# coding=utf-8
# Automatically generated by Pynguin.
import mridc.collections.reconstruction.models.conv.conv2d as module_0


def test_case_0():
    try:
        tuple_0 = ()
        str_0 = """
        This method will unpack nested NeuralTypes.

        Parameters
        ----------
        neural_type: The NeuralType to be unpacked.

        Returns
        -------
        A list of all the nested NeuralTypes.
        """
        set_0 = {str_0}
        dict_0 = {tuple_0: set_0, tuple_0: str_0}
        conv2d_0 = module_0.Conv2d(str_0, dict_0, tuple_0, dict_0)
    except BaseException:
        pass


def test_case_1():
    try:
        float_0 = 5.59
        str_0 = "0Eo4\x0b?.&;;q+X"
        list_0 = [str_0, float_0, str_0, str_0]
        bool_0 = True
        set_0 = None
        float_1 = -968.98
        conv2d_0 = module_0.Conv2d(bool_0, set_0, set_0, list_0, float_0, float_1)
    except BaseException:
        pass


def test_case_3():
    try:
        bool_0 = False
        str_0 = " : "
        float_0 = 18.22
        conv2d_0 = module_0.Conv2d(bool_0, str_0, float_0)
    except BaseException:
        pass


def test_case_4():
    try:
        int_0 = 92
        list_0 = []
        conv2d_0 = module_0.Conv2d(int_0, list_0, int_0, int_0)
    except BaseException:
        pass


def test_case_5():
    try:
        bool_0 = False
        str_0 = "lKs\ngQdzx=\t^\x0cwS+(,O,"
        list_0 = []
        conv2d_0 = module_0.Conv2d(bool_0, str_0, bool_0, list_0)
    except BaseException:
        pass


def test_case_7():
    try:
        str_0 = "q\twoLoWil}\tj`J>"
        set_0 = {str_0}
        str_1 = 'VVC\\K=B"FL'
        tuple_0 = ()
        dict_0 = {tuple_0: str_1, str_1: set_0, tuple_0: tuple_0}
        bytes_0 = b"\xfc(\x9b'\x04\x15\xf3\x9f\xa1\x0f\xccL\xc9\x97(\x94D\xd13r"
        conv2d_0 = module_0.Conv2d(str_0, set_0, str_1, dict_0, tuple_0, bytes_0)
    except BaseException:
        pass


def test_case_8():
    try:
        int_0 = -1360
        int_1 = -46
        str_0 = "nL=gE]_2**l}BNOVg;"
        bool_0 = False
        set_0 = {str_0, bool_0}
        tuple_0 = int_0, int_1, str_0, set_0
        str_1 = "yE<QP_g"
        conv2d_0 = module_0.Conv2d(bool_0, tuple_0, set_0, str_1)
    except BaseException:
        pass


def test_case_9():
    try:
        set_0 = set()
        str_0 = "H,p,1Acw;f\nG/_0pI"
        str_1 = "fS&-lMdWX\x0bqrA{`\n"
        str_2 = "]X"
        float_0 = 0.999
        dict_0 = None
        bool_0 = False
        conv2d_0 = module_0.Conv2d(str_2, float_0, dict_0, bool_0)
        assert conv2d_0.training is True
        tuple_0 = str_1, set_0, str_1, conv2d_0
        str_3 = "<"
        int_0 = 2827
        float_1 = 1595.102808
        tuple_1 = str_2, str_3, int_0, float_1
        conv2d_1 = module_0.Conv2d(str_0, tuple_0, conv2d_0, tuple_1, int_0, int_0)
    except BaseException:
        pass
