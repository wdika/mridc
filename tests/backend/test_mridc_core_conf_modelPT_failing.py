# coding=utf-8
# Automatically generated by Pynguin.
import pytest

import mridc.core.classes.dataset as module_1
import mridc.core.conf.modelPT as module_0
import mridc.core.conf.optimizers as module_2
import mridc.core.conf.schedulers as module_3
import mridc.core.conf.trainer as module_4


def test_case_0():
    try:
        int_0 = 2540
        bool_0 = False
        float_0 = -5392.36229
        sched_config_0 = module_0.SchedConfig(float_0, int_0)
        assert sched_config_0.name == pytest.approx(
            -5392.36229, abs=0.01, rel=0.01)
        assert sched_config_0.min_lr == 2540
        assert sched_config_0.last_epoch == -1
        assert module_0.SchedConfig.name == "???"
        assert module_0.SchedConfig.min_lr == pytest.approx(
            0.0, abs=0.01, rel=0.01)
        assert module_0.SchedConfig.last_epoch == -1
        dataset_config_0 = module_1.DatasetConfig(bool_0)
        model_config_0 = module_0.ModelConfig(
            dataset_config_0, dataset_config_0)
        assert model_config_0.test_ds is None
        assert model_config_0.optim is None
        assert module_0.ModelConfig.train_ds is None
        assert module_0.ModelConfig.validation_ds is None
        assert module_0.ModelConfig.test_ds is None
        assert module_0.ModelConfig.optim is None
        model_config_builder_0 = module_0.ModelConfigBuilder(model_config_0)
        assert model_config_builder_0.train_ds_cfg is None
        assert model_config_builder_0.validation_ds_cfg is None
        assert model_config_builder_0.test_ds_cfg is None
        assert model_config_builder_0.optim_cfg is None
        model_config_1 = model_config_builder_0.build()
    except BaseException:
        pass


def test_case_1():
    try:
        optimizer_params_0 = module_2.OptimizerParams()
        bool_0 = True
        dataset_config_0 = module_1.DatasetConfig(bool_0)
        model_config_0 = module_0.ModelConfig(dataset_config_0)
        assert model_config_0.validation_ds is None
        assert model_config_0.test_ds is None
        assert model_config_0.optim is None
        assert module_0.ModelConfig.train_ds is None
        assert module_0.ModelConfig.validation_ds is None
        assert module_0.ModelConfig.test_ds is None
        assert module_0.ModelConfig.optim is None
        str_0 = "k-)qm"
        model_config_1 = module_0.ModelConfig()
        assert model_config_1.train_ds is None
        assert model_config_1.validation_ds is None
        assert model_config_1.test_ds is None
        assert model_config_1.optim is None
        model_config_builder_0 = module_0.ModelConfigBuilder(model_config_1)
        assert model_config_builder_0.train_ds_cfg is None
        assert model_config_builder_0.validation_ds_cfg is None
        assert model_config_builder_0.test_ds_cfg is None
        assert model_config_builder_0.optim_cfg is None
        var_0 = model_config_builder_0.set_optim(optimizer_params_0)
        assert optimizer_params_0.lr == "???"
        assert dataset_config_0.batch_size is True
        assert dataset_config_0.drop_last is False
        assert dataset_config_0.shuffle is False
        assert dataset_config_0.num_workers == 0
        assert dataset_config_0.pin_memory is True
        assert var_0 is None
        assert module_2.MISSING == "???"
        assert len(module_2.AVAILABLE_OPTIMIZER_PARAMS) == 11
        assert module_0.MISSING == "???"
        assert module_2.OptimizerParams.lr == "???"
        assert module_1.DatasetConfig.batch_size == 32
        assert module_1.DatasetConfig.drop_last is False
        assert module_1.DatasetConfig.shuffle is False
        assert module_1.DatasetConfig.num_workers == 0
        assert module_1.DatasetConfig.pin_memory is True
        int_0 = 12
        str_1 = "c ,$}add57m\rrs)Z^"
        sched_config_0 = module_0.SchedConfig(str_1)
        assert sched_config_0.name == "c ,$}add57m\rrs)Z^"
        assert sched_config_0.min_lr == pytest.approx(0.0, abs=0.01, rel=0.01)
        assert sched_config_0.last_epoch == -1
        assert module_0.SchedConfig.name == "???"
        assert module_0.SchedConfig.min_lr == pytest.approx(
            0.0, abs=0.01, rel=0.01)
        assert module_0.SchedConfig.last_epoch == -1
        sched_config_1 = module_0.SchedConfig(str_0, int_0)
        assert sched_config_1.name == "k-)qm"
        assert sched_config_1.min_lr == 12
        assert sched_config_1.last_epoch == -1
        model_config_2 = model_config_builder_0.build()
    except BaseException:
        pass


def test_case_2():
    try:
        sched_config_0 = module_0.SchedConfig()
        assert sched_config_0.name == "???"
        assert sched_config_0.min_lr == pytest.approx(0.0, abs=0.01, rel=0.01)
        assert sched_config_0.last_epoch == -1
        assert module_0.SchedConfig.name == "???"
        assert module_0.SchedConfig.min_lr == pytest.approx(
            0.0, abs=0.01, rel=0.01)
        assert module_0.SchedConfig.last_epoch == -1
        model_config_0 = module_0.ModelConfig()
        assert model_config_0.train_ds is None
        assert model_config_0.validation_ds is None
        assert model_config_0.test_ds is None
        assert model_config_0.optim is None
        assert module_0.ModelConfig.train_ds is None
        assert module_0.ModelConfig.validation_ds is None
        assert module_0.ModelConfig.test_ds is None
        assert module_0.ModelConfig.optim is None
        m_r_i_d_c_config_0 = module_0.MRIDCConfig()
        assert m_r_i_d_c_config_0.name == "???"
        assert m_r_i_d_c_config_0.model == "???"
        assert module_0.MRIDCConfig.name == "???"
        assert module_0.MRIDCConfig.model == "???"
        assert module_0.MRIDCConfig.trainer.logger is False
        assert module_0.MRIDCConfig.trainer.callbacks is None
        assert module_0.MRIDCConfig.trainer.default_root_dir is None
        assert module_0.MRIDCConfig.trainer.gradient_clip_val == 0
        assert module_0.MRIDCConfig.trainer.num_nodes == 1
        assert module_0.MRIDCConfig.trainer.gpus is None
        assert module_0.MRIDCConfig.trainer.auto_select_gpus is False
        assert module_0.MRIDCConfig.trainer.tpu_cores is None
        assert module_0.MRIDCConfig.trainer.enable_progress_bar is True
        assert module_0.MRIDCConfig.trainer.overfit_batches == pytest.approx(
            0.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.track_grad_norm == -1
        assert module_0.MRIDCConfig.trainer.check_val_every_n_epoch == 1
        assert module_0.MRIDCConfig.trainer.fast_dev_run is False
        assert module_0.MRIDCConfig.trainer.accumulate_grad_batches == 1
        assert module_0.MRIDCConfig.trainer.max_epochs == 1000
        assert module_0.MRIDCConfig.trainer.min_epochs == 1
        assert module_0.MRIDCConfig.trainer.max_steps == -1
        assert module_0.MRIDCConfig.trainer.min_steps is None
        assert module_0.MRIDCConfig.trainer.limit_train_batches == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.limit_val_batches == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.limit_test_batches == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.val_check_interval == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.log_every_n_steps == 1
        assert module_0.MRIDCConfig.trainer.accelerator == "gpu"
        assert module_0.MRIDCConfig.trainer.sync_batchnorm is False
        assert module_0.MRIDCConfig.trainer.precision == 32
        assert module_0.MRIDCConfig.trainer.num_sanity_val_steps == 2
        assert module_0.MRIDCConfig.trainer.resume_from_checkpoint is None
        assert module_0.MRIDCConfig.trainer.profiler is None
        assert module_0.MRIDCConfig.trainer.benchmark is False
        assert module_0.MRIDCConfig.trainer.deterministic is False
        assert module_0.MRIDCConfig.trainer.auto_lr_find is False
        assert module_0.MRIDCConfig.trainer.replace_sampler_ddp is True
        assert module_0.MRIDCConfig.trainer.detect_anomaly is False
        assert module_0.MRIDCConfig.trainer.auto_scale_batch_size is False
        assert module_0.MRIDCConfig.trainer.amp_backend == "native"
        assert module_0.MRIDCConfig.trainer.amp_level is None
        assert module_0.MRIDCConfig.trainer.plugins is None
        assert module_0.MRIDCConfig.trainer.move_metrics_to_cpu is False
        assert module_0.MRIDCConfig.trainer.multiple_trainloader_mode == "max_size_cycle"
        assert module_0.MRIDCConfig.trainer.limit_predict_batches == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.gradient_clip_algorithm == "norm"
        assert module_0.MRIDCConfig.trainer.max_time is None
        assert module_0.MRIDCConfig.trainer.reload_dataloaders_every_n_epochs == 0
        assert module_0.MRIDCConfig.trainer.ipus is None
        assert module_0.MRIDCConfig.trainer.devices is None
        assert module_0.MRIDCConfig.trainer.strategy == "ddp"
        assert module_0.MRIDCConfig.trainer.enable_checkpointing is False
        assert module_0.MRIDCConfig.trainer.enable_model_summary is True
        assert module_0.MRIDCConfig.exp_manager.explicit_log_dir is None
        assert module_0.MRIDCConfig.exp_manager.exp_dir is None
        assert module_0.MRIDCConfig.exp_manager.name is None
        assert module_0.MRIDCConfig.exp_manager.version is None
        assert module_0.MRIDCConfig.exp_manager.use_datetime_version is True
        assert module_0.MRIDCConfig.exp_manager.resume_if_exists is False
        assert module_0.MRIDCConfig.exp_manager.resume_past_end is False
        assert module_0.MRIDCConfig.exp_manager.resume_ignore_no_checkpoint is False
        assert module_0.MRIDCConfig.exp_manager.create_tensorboard_logger is True
        assert module_0.MRIDCConfig.exp_manager.summary_writer_kwargs is None
        assert module_0.MRIDCConfig.exp_manager.create_wandb_logger is False
        assert module_0.MRIDCConfig.exp_manager.wandb_logger_kwargs is None
        assert module_0.MRIDCConfig.exp_manager.create_checkpoint_callback is True
        assert module_0.MRIDCConfig.exp_manager.files_to_copy is None
        assert module_0.MRIDCConfig.exp_manager.log_step_timing is True
        assert module_0.MRIDCConfig.exp_manager.log_local_rank_0_only is False
        assert module_0.MRIDCConfig.exp_manager.log_global_rank_0_only is False
        assert module_0.MRIDCConfig.exp_manager.model_parallel_size is None
        assert module_0.MRIDCConfig.hydra.run == {"dir": "."}
        assert module_0.MRIDCConfig.hydra.job_logging == {
            "root": {"handlers": None}}
        optimizer_params_0 = module_2.OptimizerParams()
        bool_0 = False
        bool_1 = True
        dataset_config_0 = module_1.DatasetConfig(bool_1)
        model_config_builder_0 = module_0.ModelConfigBuilder(model_config_0)
        assert model_config_builder_0.train_ds_cfg is None
        assert model_config_builder_0.validation_ds_cfg is None
        assert model_config_builder_0.test_ds_cfg is None
        assert model_config_builder_0.optim_cfg is None
        var_0 = model_config_builder_0.set_validation_ds(dataset_config_0)
        var_1 = model_config_builder_0.set_validation_ds(dataset_config_0)
        scheduler_params_0 = module_3.SchedulerParams()
        model_config_builder_1 = module_0.ModelConfigBuilder(model_config_0)
        assert model_config_builder_1.train_ds_cfg is None
        assert model_config_builder_1.validation_ds_cfg is None
        assert model_config_builder_1.test_ds_cfg is None
        assert model_config_builder_1.optim_cfg is None
        var_2 = model_config_builder_1.set_optim(
            optimizer_params_0, scheduler_params_0)
        int_0 = -576
        sched_config_1 = module_0.SchedConfig()
        assert sched_config_1.name == "???"
        assert sched_config_1.min_lr == pytest.approx(0.0, abs=0.01, rel=0.01)
        assert sched_config_1.last_epoch == -1
        dataset_config_1 = module_1.DatasetConfig(bool_0, int_0, bool_0)
        bool_2 = True
        bool_3 = True
        dataset_config_2 = module_1.DatasetConfig(bool_2, bool_3)
        model_config_builder_2 = module_0.ModelConfigBuilder(model_config_0)
        assert model_config_builder_2.train_ds_cfg is None
        assert model_config_builder_2.validation_ds_cfg is None
        assert model_config_builder_2.test_ds_cfg is None
        assert model_config_builder_2.optim_cfg is None
        var_3 = model_config_builder_2.set_test_ds(dataset_config_2)
        model_config_1 = module_0.ModelConfig(
            optimizer_params_0, dataset_config_1, dataset_config_2)
        assert model_config_1.optim is None
        model_config_builder_3 = module_0.ModelConfigBuilder(model_config_1)
        assert model_config_builder_3.train_ds_cfg is None
        assert model_config_builder_3.validation_ds_cfg is None
        assert model_config_builder_3.test_ds_cfg is None
        assert model_config_builder_3.optim_cfg is None
        model_config_2 = module_0.ModelConfig()
        assert model_config_2.train_ds is None
        assert model_config_2.validation_ds is None
        assert model_config_2.test_ds is None
        assert model_config_2.optim is None
        model_config_3 = model_config_builder_3.build()
    except BaseException:
        pass


def test_case_3():
    try:
        model_config_0 = None
        model_config_builder_0 = module_0.ModelConfigBuilder(model_config_0)
        assert model_config_builder_0.model_cfg is None
        assert model_config_builder_0.train_ds_cfg is None
        assert model_config_builder_0.validation_ds_cfg is None
        assert model_config_builder_0.test_ds_cfg is None
        assert model_config_builder_0.optim_cfg is None
        var_0 = model_config_builder_0.set_validation_ds()
    except BaseException:
        pass


def test_case_4():
    try:
        bool_0 = False
        int_0 = -2753
        dataset_config_0 = module_1.DatasetConfig(int_0)
        model_config_0 = module_0.ModelConfig(
            dataset_config_0, dataset_config_0)
        assert model_config_0.test_ds is None
        assert model_config_0.optim is None
        assert module_0.ModelConfig.train_ds is None
        assert module_0.ModelConfig.validation_ds is None
        assert module_0.ModelConfig.test_ds is None
        assert module_0.ModelConfig.optim is None
        model_config_builder_0 = module_0.ModelConfigBuilder(model_config_0)
        assert model_config_builder_0.train_ds_cfg is None
        assert model_config_builder_0.validation_ds_cfg is None
        assert model_config_builder_0.test_ds_cfg is None
        assert model_config_builder_0.optim_cfg is None
        var_0 = model_config_builder_0.set_train_ds()
        assert model_config_0.train_ds is None
        dataset_config_1 = module_1.DatasetConfig(bool_0)
        model_config_1 = module_0.ModelConfig(dataset_config_1)
        assert model_config_1.validation_ds is None
        assert model_config_1.test_ds is None
        assert model_config_1.optim is None
        model_config_builder_1 = module_0.ModelConfigBuilder(model_config_1)
        assert model_config_builder_1.train_ds_cfg is None
        assert model_config_builder_1.validation_ds_cfg is None
        assert model_config_builder_1.test_ds_cfg is None
        assert model_config_builder_1.optim_cfg is None
        str_0 = "ix\tfY6\nE.!u=C^M"
        optimizer_params_0 = module_2.OptimizerParams()
        optim_config_0 = module_0.OptimConfig()
        assert optim_config_0.name == "???"
        assert optim_config_0.sched is None
        assert module_0.OptimConfig.name == "???"
        assert module_0.OptimConfig.sched is None
        tuple_0 = optimizer_params_0, int_0, optim_config_0
        float_0 = 2123.895
        str_1 = "MSS!0mUadY"
        list_0 = [dataset_config_0, tuple_0, tuple_0, str_1]
        int_1 = 65
        none_type_0 = None
        hydra_config_0 = module_0.HydraConfig()
        assert hydra_config_0.run == {"dir": "."}
        assert hydra_config_0.job_logging == {"root": {"handlers": None}}
        trainer_config_0 = module_4.TrainerConfig(
            int_0,
            tuple_0,
            str_0,
            float_0,
            optim_config_0,
            bool_0,
            int_0,
            str_0,
            model_config_0,
            str_0,
            str_1,
            list_0,
            int_1,
            int_1,
            none_type_0,
        )
        hydra_config_1 = module_0.HydraConfig()
        assert hydra_config_1.run == {"dir": "."}
        assert hydra_config_1.job_logging == {"root": {"handlers": None}}
        m_r_i_d_c_config_0 = module_0.MRIDCConfig(
            str_0, trainer_config_0, hydra_config_1)
        assert m_r_i_d_c_config_0.name == "ix\tfY6\nE.!u=C^M"
        assert module_0.MRIDCConfig.name == "???"
        assert module_0.MRIDCConfig.model == "???"
        assert module_0.MRIDCConfig.trainer.logger is False
        assert module_0.MRIDCConfig.trainer.callbacks is None
        assert module_0.MRIDCConfig.trainer.default_root_dir is None
        assert module_0.MRIDCConfig.trainer.gradient_clip_val == 0
        assert module_0.MRIDCConfig.trainer.num_nodes == 1
        assert module_0.MRIDCConfig.trainer.gpus is None
        assert module_0.MRIDCConfig.trainer.auto_select_gpus is False
        assert module_0.MRIDCConfig.trainer.tpu_cores is None
        assert module_0.MRIDCConfig.trainer.enable_progress_bar is True
        assert module_0.MRIDCConfig.trainer.overfit_batches == pytest.approx(
            0.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.track_grad_norm == -1
        assert module_0.MRIDCConfig.trainer.check_val_every_n_epoch == 1
        assert module_0.MRIDCConfig.trainer.fast_dev_run is False
        assert module_0.MRIDCConfig.trainer.accumulate_grad_batches == 1
        assert module_0.MRIDCConfig.trainer.max_epochs == 1000
        assert module_0.MRIDCConfig.trainer.min_epochs == 1
        assert module_0.MRIDCConfig.trainer.max_steps == -1
        assert module_0.MRIDCConfig.trainer.min_steps is None
        assert module_0.MRIDCConfig.trainer.limit_train_batches == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.limit_val_batches == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.limit_test_batches == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.val_check_interval == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.log_every_n_steps == 1
        assert module_0.MRIDCConfig.trainer.accelerator == "gpu"
        assert module_0.MRIDCConfig.trainer.sync_batchnorm is False
        assert module_0.MRIDCConfig.trainer.precision == 32
        assert module_0.MRIDCConfig.trainer.num_sanity_val_steps == 2
        assert module_0.MRIDCConfig.trainer.resume_from_checkpoint is None
        assert module_0.MRIDCConfig.trainer.profiler is None
        assert module_0.MRIDCConfig.trainer.benchmark is False
        assert module_0.MRIDCConfig.trainer.deterministic is False
        assert module_0.MRIDCConfig.trainer.auto_lr_find is False
        assert module_0.MRIDCConfig.trainer.replace_sampler_ddp is True
        assert module_0.MRIDCConfig.trainer.detect_anomaly is False
        assert module_0.MRIDCConfig.trainer.auto_scale_batch_size is False
        assert module_0.MRIDCConfig.trainer.amp_backend == "native"
        assert module_0.MRIDCConfig.trainer.amp_level is None
        assert module_0.MRIDCConfig.trainer.plugins is None
        assert module_0.MRIDCConfig.trainer.move_metrics_to_cpu is False
        assert module_0.MRIDCConfig.trainer.multiple_trainloader_mode == "max_size_cycle"
        assert module_0.MRIDCConfig.trainer.limit_predict_batches == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.gradient_clip_algorithm == "norm"
        assert module_0.MRIDCConfig.trainer.max_time is None
        assert module_0.MRIDCConfig.trainer.reload_dataloaders_every_n_epochs == 0
        assert module_0.MRIDCConfig.trainer.ipus is None
        assert module_0.MRIDCConfig.trainer.devices is None
        assert module_0.MRIDCConfig.trainer.strategy == "ddp"
        assert module_0.MRIDCConfig.trainer.enable_checkpointing is False
        assert module_0.MRIDCConfig.trainer.enable_model_summary is True
        assert module_0.MRIDCConfig.exp_manager.explicit_log_dir is None
        assert module_0.MRIDCConfig.exp_manager.exp_dir is None
        assert module_0.MRIDCConfig.exp_manager.name is None
        assert module_0.MRIDCConfig.exp_manager.version is None
        assert module_0.MRIDCConfig.exp_manager.use_datetime_version is True
        assert module_0.MRIDCConfig.exp_manager.resume_if_exists is False
        assert module_0.MRIDCConfig.exp_manager.resume_past_end is False
        assert module_0.MRIDCConfig.exp_manager.resume_ignore_no_checkpoint is False
        assert module_0.MRIDCConfig.exp_manager.create_tensorboard_logger is True
        assert module_0.MRIDCConfig.exp_manager.summary_writer_kwargs is None
        assert module_0.MRIDCConfig.exp_manager.create_wandb_logger is False
        assert module_0.MRIDCConfig.exp_manager.wandb_logger_kwargs is None
        assert module_0.MRIDCConfig.exp_manager.create_checkpoint_callback is True
        assert module_0.MRIDCConfig.exp_manager.files_to_copy is None
        assert module_0.MRIDCConfig.exp_manager.log_step_timing is True
        assert module_0.MRIDCConfig.exp_manager.log_local_rank_0_only is False
        assert module_0.MRIDCConfig.exp_manager.log_global_rank_0_only is False
        assert module_0.MRIDCConfig.exp_manager.model_parallel_size is None
        assert module_0.MRIDCConfig.hydra.run == {"dir": "."}
        assert module_0.MRIDCConfig.hydra.job_logging == {
            "root": {"handlers": None}}
        str_2 = "B%\x0cKaZq,5("
        dict_0 = {str_0: int_0, str_2: str_2}
        hydra_config_2 = module_0.HydraConfig(dict_0)
        assert hydra_config_2.run == {
            "ix\tfY6\nE.!u=C^M": -2753, "B%\x0cKaZq,5(": "B%\x0cKaZq,5("}
        assert hydra_config_2.job_logging == {"root": {"handlers": None}}
        model_config_2 = model_config_builder_1.build()
    except BaseException:
        pass


def test_case_5():
    try:
        str_0 = "^U"
        float_0 = 1906.310661
        int_0 = 45
        bool_0 = True
        str_1 = "uF:B"
        dict_0 = {str_1: bool_0}
        hydra_config_0 = module_0.HydraConfig(dict_0, dict_0)
        assert hydra_config_0.run == {"uF:B": True}
        assert hydra_config_0.job_logging == {"uF:B": True}
        str_2 = ""
        scheduler_params_0 = module_3.SchedulerParams()
        int_1 = -2400
        str_3 = 'Ja3kw*">oP826hsk'
        set_0 = set()
        trainer_config_0 = module_4.TrainerConfig(
            scheduler_params_0,
            int_0,
            int_0,
            int_0,
            hydra_config_0,
            int_1,
            int_0,
            bool_0,
            str_0,
            str_2,
            str_3,
            float_0,
            str_3,
            set_0,
            bool_0,
        )
        var_0 = None
        m_r_i_d_c_config_0 = module_0.MRIDCConfig(
            str_2, trainer_config_0, var_0, hydra_config_0)
        assert m_r_i_d_c_config_0.name == ""
        assert m_r_i_d_c_config_0.trainer is None
        assert module_0.MRIDCConfig.name == "???"
        assert module_0.MRIDCConfig.model == "???"
        assert module_0.MRIDCConfig.trainer.logger is False
        assert module_0.MRIDCConfig.trainer.callbacks is None
        assert module_0.MRIDCConfig.trainer.default_root_dir is None
        assert module_0.MRIDCConfig.trainer.gradient_clip_val == 0
        assert module_0.MRIDCConfig.trainer.num_nodes == 1
        assert module_0.MRIDCConfig.trainer.gpus is None
        assert module_0.MRIDCConfig.trainer.auto_select_gpus is False
        assert module_0.MRIDCConfig.trainer.tpu_cores is None
        assert module_0.MRIDCConfig.trainer.enable_progress_bar is True
        assert module_0.MRIDCConfig.trainer.overfit_batches == pytest.approx(
            0.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.track_grad_norm == -1
        assert module_0.MRIDCConfig.trainer.check_val_every_n_epoch == 1
        assert module_0.MRIDCConfig.trainer.fast_dev_run is False
        assert module_0.MRIDCConfig.trainer.accumulate_grad_batches == 1
        assert module_0.MRIDCConfig.trainer.max_epochs == 1000
        assert module_0.MRIDCConfig.trainer.min_epochs == 1
        assert module_0.MRIDCConfig.trainer.max_steps == -1
        assert module_0.MRIDCConfig.trainer.min_steps is None
        assert module_0.MRIDCConfig.trainer.limit_train_batches == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.limit_val_batches == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.limit_test_batches == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.val_check_interval == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.log_every_n_steps == 1
        assert module_0.MRIDCConfig.trainer.accelerator == "gpu"
        assert module_0.MRIDCConfig.trainer.sync_batchnorm is False
        assert module_0.MRIDCConfig.trainer.precision == 32
        assert module_0.MRIDCConfig.trainer.num_sanity_val_steps == 2
        assert module_0.MRIDCConfig.trainer.resume_from_checkpoint is None
        assert module_0.MRIDCConfig.trainer.profiler is None
        assert module_0.MRIDCConfig.trainer.benchmark is False
        assert module_0.MRIDCConfig.trainer.deterministic is False
        assert module_0.MRIDCConfig.trainer.auto_lr_find is False
        assert module_0.MRIDCConfig.trainer.replace_sampler_ddp is True
        assert module_0.MRIDCConfig.trainer.detect_anomaly is False
        assert module_0.MRIDCConfig.trainer.auto_scale_batch_size is False
        assert module_0.MRIDCConfig.trainer.amp_backend == "native"
        assert module_0.MRIDCConfig.trainer.amp_level is None
        assert module_0.MRIDCConfig.trainer.plugins is None
        assert module_0.MRIDCConfig.trainer.move_metrics_to_cpu is False
        assert module_0.MRIDCConfig.trainer.multiple_trainloader_mode == "max_size_cycle"
        assert module_0.MRIDCConfig.trainer.limit_predict_batches == pytest.approx(
            1.0, abs=0.01, rel=0.01)
        assert module_0.MRIDCConfig.trainer.gradient_clip_algorithm == "norm"
        assert module_0.MRIDCConfig.trainer.max_time is None
        assert module_0.MRIDCConfig.trainer.reload_dataloaders_every_n_epochs == 0
        assert module_0.MRIDCConfig.trainer.ipus is None
        assert module_0.MRIDCConfig.trainer.devices is None
        assert module_0.MRIDCConfig.trainer.strategy == "ddp"
        assert module_0.MRIDCConfig.trainer.enable_checkpointing is False
        assert module_0.MRIDCConfig.trainer.enable_model_summary is True
        assert module_0.MRIDCConfig.exp_manager.explicit_log_dir is None
        assert module_0.MRIDCConfig.exp_manager.exp_dir is None
        assert module_0.MRIDCConfig.exp_manager.name is None
        assert module_0.MRIDCConfig.exp_manager.version is None
        assert module_0.MRIDCConfig.exp_manager.use_datetime_version is True
        assert module_0.MRIDCConfig.exp_manager.resume_if_exists is False
        assert module_0.MRIDCConfig.exp_manager.resume_past_end is False
        assert module_0.MRIDCConfig.exp_manager.resume_ignore_no_checkpoint is False
        assert module_0.MRIDCConfig.exp_manager.create_tensorboard_logger is True
        assert module_0.MRIDCConfig.exp_manager.summary_writer_kwargs is None
        assert module_0.MRIDCConfig.exp_manager.create_wandb_logger is False
        assert module_0.MRIDCConfig.exp_manager.wandb_logger_kwargs is None
        assert module_0.MRIDCConfig.exp_manager.create_checkpoint_callback is True
        assert module_0.MRIDCConfig.exp_manager.files_to_copy is None
        assert module_0.MRIDCConfig.exp_manager.log_step_timing is True
        assert module_0.MRIDCConfig.exp_manager.log_local_rank_0_only is False
        assert module_0.MRIDCConfig.exp_manager.log_global_rank_0_only is False
        assert module_0.MRIDCConfig.exp_manager.model_parallel_size is None
        assert module_0.MRIDCConfig.hydra.run == {"dir": "."}
        assert module_0.MRIDCConfig.hydra.job_logging == {
            "root": {"handlers": None}}
        optim_config_0 = module_0.OptimConfig()
        assert optim_config_0.name == "???"
        assert optim_config_0.sched is None
        assert module_0.OptimConfig.name == "???"
        assert module_0.OptimConfig.sched is None
        model_config_0 = module_0.ModelConfig()
        assert model_config_0.train_ds is None
        assert model_config_0.validation_ds is None
        assert model_config_0.test_ds is None
        assert model_config_0.optim is None
        assert module_0.ModelConfig.train_ds is None
        assert module_0.ModelConfig.validation_ds is None
        assert module_0.ModelConfig.test_ds is None
        assert module_0.ModelConfig.optim is None
        model_config_builder_0 = module_0.ModelConfigBuilder(model_config_0)
        assert model_config_builder_0.train_ds_cfg is None
        assert model_config_builder_0.validation_ds_cfg is None
        assert model_config_builder_0.test_ds_cfg is None
        assert model_config_builder_0.optim_cfg is None
        model_config_1 = model_config_builder_0.build()
    except BaseException:
        pass
