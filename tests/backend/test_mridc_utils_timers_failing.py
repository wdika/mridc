# coding=utf-8
# Automatically generated by Pynguin.
import mridc.utils.timers as module_0


def test_case_0():
    try:
        str_0 = "F119,7r;^\t52S/f"
        named_timer_0 = module_0.NamedTimer()
        assert named_timer_0.timers == {}
        named_timer_1 = module_0.NamedTimer()
        assert named_timer_1.timers == {}
        named_timer_2 = module_0.NamedTimer(str_0, named_timer_1)
    except BaseException:
        pass


def test_case_1():
    try:
        named_timer_0 = module_0.NamedTimer()
        assert named_timer_0.timers == {}
        var_0 = named_timer_0.start()
        assert len(named_timer_0.timers) == 1
        assert var_0 is None
        var_1 = named_timer_0.start()
    except BaseException:
        pass


def test_case_2():
    try:
        named_timer_0 = module_0.NamedTimer()
        assert named_timer_0.timers == {}
        var_0 = named_timer_0.reset()
        assert var_0 is None
        bytes_0 = b"d\xbb\\%W=U\xfe\xbf\x02="
        named_timer_1 = module_0.NamedTimer()
        assert named_timer_1.timers == {}
        var_1 = named_timer_1.reset()
        assert var_1 is None
        var_2 = named_timer_1.start()
        assert len(named_timer_1.timers) == 1
        assert var_2 is None
        var_3 = named_timer_1.stop()
        assert var_3 is None
        var_4 = named_timer_1.reset(bytes_0)
        assert len(named_timer_1.timers) == 2
        assert var_4 is None
        var_5 = named_timer_0.export()
        assert var_5 == {}
        var_6 = named_timer_1.reset()
        assert named_timer_1.timers == {}
        assert var_6 is None
        str_0 = ":d'Ubz\nFo`i;"
        named_timer_2 = module_0.NamedTimer()
        assert named_timer_2.timers == {}
        var_7 = named_timer_2.__getitem__(str_0)
    except BaseException:
        pass


def test_case_3():
    try:
        named_timer_0 = module_0.NamedTimer()
        assert named_timer_0.timers == {}
        var_0 = named_timer_0.reset()
        assert var_0 is None
        bytes_0 = b"d\xbb\\%W=U\xfe\xbf\x02="
        named_timer_1 = module_0.NamedTimer()
        assert named_timer_1.timers == {}
        var_1 = named_timer_1.reset()
        assert var_1 is None
        var_2 = named_timer_1.start()
        assert len(named_timer_1.timers) == 1
        assert var_2 is None
        var_3 = named_timer_1.stop()
        assert var_3 is None
        var_4 = named_timer_1.reset(bytes_0)
        assert len(named_timer_1.timers) == 2
        assert var_4 is None
        var_5 = named_timer_0.export()
        assert var_5 == {}
        var_6 = named_timer_1.reset()
        assert named_timer_1.timers == {}
        assert var_6 is None
        str_0 = ":d'Ubz\nFo`i;"
        named_timer_2 = module_0.NamedTimer()
        assert named_timer_2.timers == {}
        var_7 = named_timer_2.__getitem__(str_0)
    except BaseException:
        pass


def test_case_4():
    try:
        named_timer_0 = module_0.NamedTimer()
        assert named_timer_0.timers == {}
        var_0 = named_timer_0.reset()
        assert var_0 is None
        bytes_0 = b"d\xbb\\%W=U\xfe\xbf\x02="
        named_timer_1 = module_0.NamedTimer()
        assert named_timer_1.timers == {}
        var_1 = named_timer_1.reset()
        assert var_1 is None
        var_2 = named_timer_1.start()
        assert len(named_timer_1.timers) == 1
        assert var_2 is None
        var_3 = named_timer_1.stop()
        assert var_3 is None
        var_4 = named_timer_1.reset(bytes_0)
        assert len(named_timer_1.timers) == 2
        assert var_4 is None
        var_5 = named_timer_0.export()
        assert var_5 == {}
        var_6 = named_timer_1.stop()
    except BaseException:
        pass


def test_case_5():
    try:
        named_timer_0 = module_0.NamedTimer()
        assert named_timer_0.timers == {}
        var_0 = named_timer_0.stop()
    except BaseException:
        pass


def test_case_6():
    try:
        float_0 = -1938.827154
        named_timer_0 = module_0.NamedTimer(float_0)
    except BaseException:
        pass


def test_case_7():
    try:
        str_0 = "\x0c"
        bool_0 = None
        str_1 = "yR_s"
        named_timer_0 = module_0.NamedTimer(bool_0, str_0, str_1)
    except BaseException:
        pass


def test_case_8():
    try:
        complex_0 = None
        named_timer_0 = module_0.NamedTimer()
        assert named_timer_0.timers == {}
        var_0 = named_timer_0.export()
        assert var_0 == {}
        var_1 = named_timer_0.start()
        assert len(named_timer_0.timers) == 1
        assert var_1 is None
        var_2 = named_timer_0.active_timers()
        assert var_2 == [""]
        var_3 = named_timer_0.reset()
        assert named_timer_0.timers == {}
        assert var_3 is None
        var_4 = named_timer_0.start()
        assert len(named_timer_0.timers) == 1
        assert var_4 is None
        var_5 = named_timer_0.export()
        assert var_5 == {}
        var_6 = named_timer_0.start(complex_0)
        assert len(named_timer_0.timers) == 2
        assert var_6 is None
        var_7 = named_timer_0.active_timers()
        assert var_7 == ["", None]
        var_8 = named_timer_0.active_timers()
        assert var_8 == ["", None]
        var_9 = named_timer_0.stop(complex_0)
        assert var_9 is None
        var_10 = named_timer_0.export()
        assert len(var_10) == 1
        var_11 = named_timer_0.export()
        assert len(var_11) == 1
        var_12 = named_timer_0.stop()
        assert var_12 is None
        str_0 = "@M_8^xd"
        var_13 = named_timer_0.__getitem__(str_0)
    except BaseException:
        pass
